#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

async function createEnvFiles() {
  console.log('üè† Housing Dashboard Setup');
  console.log('=========================\n');
  
  console.log('This script will help you set up your environment files.\n');

  // Backend environment setup
  console.log('üìã Backend Configuration:');
  const dbHost = await question('Database host (localhost): ') || 'localhost';
  const dbPort = await question('Database port (3306): ') || '3306';
  const dbUser = await question('Database username: ');
  const dbPassword = await question('Database password: ');
  const dbName = await question('Database name (housing_dashboard): ') || 'housing_dashboard';
  const apiKey = await question('API key (or press enter for default): ') || 'dev-api-key-change-in-production';
  const jwtSecret = await question('JWT secret (or press enter for generated): ') || generateRandomString(32);

  // Frontend environment setup
  console.log('\nüì± Frontend Configuration:');
  const apiUrl = await question('API URL (http://localhost:3001/api): ') || 'http://localhost:3001/api';
  const enableAnalytics = await question('Enable analytics (y/n): ') || 'n';

  // Create backend .env file
  const backendEnv = `# Backend Environment Configuration
# Generated by setup script

# Database Configuration
DB_HOST=${dbHost}
DB_PORT=${dbPort}
DB_USER=${dbUser}
DB_PASSWORD=${dbPassword}
DB_NAME=${dbName}
DB_CONNECTION_LIMIT=10
DB_SSL=false

# Server Configuration
PORT=3001
NODE_ENV=development

# Security
API_KEY=${apiKey}
JWT_SECRET=${jwtSecret}
JWT_EXPIRES_IN=7d
BCRYPT_ROUNDS=12

# Rate Limiting
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# CORS Configuration
CORS_ORIGINS=http://localhost:3000,http://localhost:3001

# Logging
LOG_LEVEL=info
LOG_FILE_PATH=./logs

# Redis Configuration (for caching)
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=
REDIS_DB=0

# External APIs
AIRBNB_API_KEY=your_api_key_here
REAL_ESTATE_API_KEY=your_api_key_here

# Monitoring
SENTRY_DSN=your_sentry_dsn_here
ENABLE_MONITORING=false
`;

  // Create frontend .env file
  const frontendEnv = `# Frontend Environment Configuration
# Generated by setup script

# API Configuration
REACT_APP_API_URL=${apiUrl}
REACT_APP_API_KEY=${apiKey}

# Environment
REACT_APP_ENV=development

# Features
REACT_APP_ENABLE_ANALYTICS=${enableAnalytics === 'y' ? 'true' : 'false'}
REACT_APP_ENABLE_REAL_SCRAPING=false

# External Services
REACT_APP_SENTRY_DSN=your_sentry_dsn_here
REACT_APP_GOOGLE_MAPS_API_KEY=your_google_maps_api_key
REACT_APP_MAPBOX_TOKEN=your_mapbox_token

# Debug Settings
REACT_APP_DEBUG_MODE=false
REACT_APP_LOG_LEVEL=info

# Build Settings
GENERATE_SOURCEMAP=false
DISABLE_ESLINT_PLUGIN=false
`;

  try {
    // Write backend .env file
    fs.writeFileSync(path.join(__dirname, 'backend', '.env'), backendEnv);
    console.log('‚úÖ Created backend/.env');

    // Write frontend .env.local file
    fs.writeFileSync(path.join(__dirname, '.env.local'), frontendEnv);
    console.log('‚úÖ Created .env.local');

    console.log('\nüéâ Setup completed successfully!\n');
    console.log('Next steps:');
    console.log('1. Set up your MySQL database');
    console.log('2. Run database migrations: cd backend && npm run db:migrate');
    console.log('3. Seed the database: npm run db:seed');
    console.log('4. Install dependencies: npm install && cd backend && npm install');
    console.log('5. Start the backend: cd backend && npm run dev');
    console.log('6. Start the frontend: npm start');
    console.log('\nüìö For more information, see README.md');

  } catch (error) {
    console.error('‚ùå Error creating environment files:', error.message);
    process.exit(1);
  }
}

function generateRandomString(length) {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  let result = '';
  for (let i = 0; i < length; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
}

async function checkPrerequisites() {
  console.log('üîç Checking prerequisites...\n');
  
  // Check Node.js version
  const nodeVersion = process.version;
  const majorVersion = parseInt(nodeVersion.slice(1).split('.')[0]);
  
  if (majorVersion < 18) {
    console.error('‚ùå Node.js version 18 or higher is required');
    console.error(`   Current version: ${nodeVersion}`);
    process.exit(1);
  }
  console.log(`‚úÖ Node.js ${nodeVersion}`);

  // Check if directories exist
  if (!fs.existsSync('backend')) {
    console.error('‚ùå Backend directory not found');
    process.exit(1);
  }
  console.log('‚úÖ Backend directory found');

  if (!fs.existsSync('package.json')) {
    console.error('‚ùå Frontend package.json not found');
    process.exit(1);
  }
  console.log('‚úÖ Frontend package.json found');

  console.log('');
}

async function main() {
  try {
    await checkPrerequisites();
    await createEnvFiles();
  } catch (error) {
    console.error('‚ùå Setup failed:', error.message);
    process.exit(1);
  } finally {
    rl.close();
  }
}

if (require.main === module) {
  main();
}

module.exports = { createEnvFiles, checkPrerequisites }; 
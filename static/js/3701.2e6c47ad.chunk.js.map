{"version":3,"file":"static/js/3701.2e6c47ad.chunk.js","mappings":"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","sources":["components/charts/PriceChart.js","components/charts/SalesChart.js","components/charts/MarketTrendsChart.js","components/charts/HousingTypeDistributionChart.js","components/charts/PricePerSqFtChart.js","components/charts/MarketVelocityChart.js","components/charts/NewVsResaleChart.js","data/marketHealth.js","components/charts/MarketHealthDashboard.js","components/charts/HousingMapDashboard.js","components/KeyMetrics.js","components/EnhancedMetrics.js","components/RegionalComparison.js","utils/masterExport.js","utils/csvExport.js","components/Dashboard.js"],"sourcesContent":["import React from 'react';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from 'recharts';\nimport { getDataForRegionAndType } from '../../data/housingData';\n\nfunction PriceChart({ selectedRegion, selectedHousingType }) {\n  const data =\n    getDataForRegionAndType('priceData', selectedRegion, selectedHousingType) ||\n    [];\n\n  const formatPrice = value => {\n    return `$${(value / 1000000).toFixed(2)}M`;\n  };\n\n  const CustomTooltip = ({ active, payload, label }) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className=\"bg-white p-4 rounded-lg shadow-lg border border-gray-200\">\n          <p className=\"font-semibold text-gray-800\">{label}</p>\n          <p className=\"text-blue-600\">\n            Price: ${payload[0].value.toLocaleString()}\n          </p>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <ResponsiveContainer width=\"100%\" height={300}>\n      <LineChart\n        data={data}\n        margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n        <XAxis\n          dataKey=\"month\"\n          tick={{ fontSize: 12 }}\n          angle={-45}\n          textAnchor=\"end\"\n          height={60}\n        />\n        <YAxis tickFormatter={formatPrice} tick={{ fontSize: 12 }} />\n        <Tooltip content={<CustomTooltip />} />\n        <Legend />\n        <Line\n          type=\"monotone\"\n          dataKey=\"price\"\n          stroke=\"#2563EB\"\n          strokeWidth={2}\n          dot={{ strokeWidth: 2, r: 4 }}\n          activeDot={{ r: 6, strokeWidth: 0 }}\n          name=\"Average Price\"\n        />\n      </LineChart>\n    </ResponsiveContainer>\n  );\n}\n\nexport default React.memo(PriceChart);\n","import React from 'react';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from 'recharts';\nimport { getDataForRegionAndType } from '../../data/housingData';\n\nfunction SalesChart({ selectedRegion, selectedHousingType }) {\n  const data =\n    getDataForRegionAndType('salesData', selectedRegion, selectedHousingType) ||\n    [];\n\n  const CustomTooltip = ({ active, payload, label }) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className=\"bg-white p-4 rounded-lg shadow-lg border border-gray-200\">\n          <p className=\"font-semibold text-gray-800\">{label}</p>\n          <p className=\"text-green-600\">\n            Sales: {payload[0].value.toLocaleString()}\n          </p>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <ResponsiveContainer width=\"100%\" height={300}>\n      <BarChart data={data} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n        <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n        <XAxis\n          dataKey=\"month\"\n          tick={{ fontSize: 12 }}\n          angle={-45}\n          textAnchor=\"end\"\n          height={60}\n        />\n        <YAxis tick={{ fontSize: 12 }} />\n        <Tooltip content={<CustomTooltip />} />\n        <Legend />\n        <Bar\n          dataKey=\"sales\"\n          fill=\"#10B981\"\n          radius={[8, 8, 0, 0]}\n          name=\"Monthly Sales\"\n        />\n      </BarChart>\n    </ResponsiveContainer>\n  );\n}\n\nexport default SalesChart;\n","import React, { useState } from 'react';\nimport {\n  ComposedChart,\n  Line,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  Area,\n} from 'recharts';\nimport { getMarketTrendsData } from '../../data/housingData';\n\nfunction MarketTrendsChart({ selectedRegion, selectedHousingType }) {\n  const [metricsPair, setMetricsPair] = useState('price-volume');\n  const trendsData = getMarketTrendsData(selectedRegion, selectedHousingType);\n\n  const metricsPairs = {\n    'price-volume': {\n      title: 'Price & Sales Volume Trends',\n      leftMetric: 'priceIndex',\n      leftName: 'Average Price Index',\n      leftColor: '#3B82F6',\n      rightMetric: 'salesIndex',\n      rightName: 'Sales Volume Index',\n      rightColor: '#8B5CF6',\n      showArea: true,\n    },\n    'affordability-ratio': {\n      title: 'Affordability & List-to-Sale Ratio',\n      leftMetric: 'affordabilityIndex',\n      leftName: 'Affordability Index',\n      leftColor: '#10B981',\n      rightMetric: 'listToSaleRatio',\n      rightName: 'List-to-Sale Ratio (%)',\n      rightColor: '#F59E0B',\n      showArea: false,\n    },\n  };\n\n  const activeMetrics = metricsPairs[metricsPair];\n\n  const CustomTooltip = ({ active, payload, label }) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className=\"bg-white p-4 rounded-lg shadow-xl border border-gray-200\">\n          <p className=\"font-semibold text-gray-800 mb-2\">{label}</p>\n          {payload.map((entry, index) => (\n            <div key={index} className=\"flex items-center space-x-2 text-sm\">\n              <div\n                className=\"w-3 h-3 rounded-full\"\n                style={{ backgroundColor: entry.color }}\n              />\n              <span className=\"text-gray-600\">{entry.name}:</span>\n              <span className=\"font-medium\">{entry.value.toFixed(1)}</span>\n            </div>\n          ))}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <div>\n      <div className=\"flex justify-between items-center mb-6\">\n        <h3 className=\"text-xl font-bold text-gray-800\">\n          {activeMetrics.title}\n        </h3>\n        <div className=\"flex space-x-2\">\n          {Object.entries(metricsPairs).map(([key, value]) => (\n            <button\n              key={key}\n              className={`\n                px-4 py-2 text-sm font-medium rounded-lg transition-all duration-300\n                ${\n                  metricsPair === key\n                    ? 'bg-gradient-to-r from-blue-500 to-blue-600 text-white shadow-md transform scale-105'\n                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                }\n              `}\n              onClick={() => setMetricsPair(key)}\n            >\n              {key === 'price-volume'\n                ? 'Price & Volume'\n                : 'Affordability & Ratio'}\n            </button>\n          ))}\n        </div>\n      </div>\n\n      <ResponsiveContainer width=\"100%\" height={350}>\n        <ComposedChart\n          data={trendsData}\n          margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n        >\n          <defs>\n            <linearGradient id=\"colorLeft\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n              <stop\n                offset=\"5%\"\n                stopColor={activeMetrics.leftColor}\n                stopOpacity={0.8}\n              />\n              <stop\n                offset=\"95%\"\n                stopColor={activeMetrics.leftColor}\n                stopOpacity={0.1}\n              />\n            </linearGradient>\n            <linearGradient id=\"colorRight\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n              <stop\n                offset=\"5%\"\n                stopColor={activeMetrics.rightColor}\n                stopOpacity={0.8}\n              />\n              <stop\n                offset=\"95%\"\n                stopColor={activeMetrics.rightColor}\n                stopOpacity={0.1}\n              />\n            </linearGradient>\n          </defs>\n\n          <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n          <XAxis\n            dataKey=\"month\"\n            tick={{ fontSize: 12 }}\n            tickLine={false}\n            axisLine={{ stroke: '#e5e7eb' }}\n          />\n          <YAxis\n            yAxisId=\"left\"\n            tick={{ fontSize: 12 }}\n            tickLine={false}\n            axisLine={{ stroke: '#e5e7eb' }}\n          />\n          <YAxis\n            yAxisId=\"right\"\n            orientation=\"right\"\n            tick={{ fontSize: 12 }}\n            tickLine={false}\n            axisLine={{ stroke: '#e5e7eb' }}\n          />\n          <Tooltip content={<CustomTooltip />} />\n          <Legend wrapperStyle={{ paddingTop: '20px' }} iconType=\"circle\" />\n\n          {activeMetrics.showArea && (\n            <Area\n              yAxisId=\"left\"\n              type=\"monotone\"\n              dataKey={activeMetrics.leftMetric}\n              stroke=\"none\"\n              fillOpacity={1}\n              fill=\"url(#colorLeft)\"\n            />\n          )}\n\n          <Line\n            yAxisId=\"left\"\n            type=\"monotone\"\n            dataKey={activeMetrics.leftMetric}\n            name={activeMetrics.leftName}\n            stroke={activeMetrics.leftColor}\n            strokeWidth={3}\n            dot={{ fill: activeMetrics.leftColor, r: 4 }}\n            activeDot={{ r: 6, className: 'animate-pulse' }}\n          />\n\n          <Bar\n            yAxisId=\"right\"\n            dataKey={activeMetrics.rightMetric}\n            name={activeMetrics.rightName}\n            fill={activeMetrics.rightColor}\n            radius={[8, 8, 0, 0]}\n            opacity={0.8}\n          />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nexport default MarketTrendsChart;\n","import React from 'react';\nimport { PieChart, Pie, Cell, Tooltip, ResponsiveContainer } from 'recharts';\nimport { housingData } from '../../data/housingData';\n\nfunction HousingTypeDistributionChart({ selectedRegion }) {\n  const distributionData =\n    housingData.housingTypeDistribution[selectedRegion] || [];\n\n  const COLORS = ['#3B82F6', '#10B981', '#F59E0B', '#EF4444'];\n\n  const CustomTooltip = ({ active, payload }) => {\n    if (active && payload && payload.length) {\n      const data = payload[0].payload;\n      return (\n        <div className=\"bg-white p-4 rounded-lg shadow-xl border border-gray-200\">\n          <p className=\"font-bold text-gray-800 mb-2\">{data.type}</p>\n          <div className=\"space-y-1\">\n            <p className=\"text-sm\">\n              <span className=\"text-gray-600\">Market Share:</span>\n              <span className=\"font-medium ml-2\">{data.percentage}%</span>\n            </p>\n            <p className=\"text-sm\">\n              <span className=\"text-gray-600\">Total Units:</span>\n              <span className=\"font-medium ml-2\">\n                {data.count.toLocaleString()}\n              </span>\n            </p>\n            <p className=\"text-sm\">\n              <span className=\"text-gray-600\">Avg Price:</span>\n              <span className=\"font-medium ml-2\">\n                ${data.avgPrice.toLocaleString()}\n              </span>\n            </p>\n          </div>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  const renderCustomizedLabel = ({\n    cx,\n    cy,\n    midAngle,\n    innerRadius,\n    outerRadius,\n    percent,\n  }) => {\n    const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n    const x = cx + radius * Math.cos((-midAngle * Math.PI) / 180);\n    const y = cy + radius * Math.sin((-midAngle * Math.PI) / 180);\n\n    return (\n      <text\n        x={x}\n        y={y}\n        fill=\"white\"\n        textAnchor={x > cx ? 'start' : 'end'}\n        dominantBaseline=\"central\"\n        className=\"font-semibold text-sm\"\n      >\n        {`${(percent * 100).toFixed(1)}%`}\n      </text>\n    );\n  };\n\n  return (\n    <div>\n      <h3 className=\"text-lg font-bold text-gray-800 mb-4 flex items-center\">\n        <span className=\"mr-2\">🏘️</span>\n        Housing Type Distribution - {selectedRegion}\n      </h3>\n\n      {distributionData.length > 0 ? (\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Pie Chart */}\n          <div>\n            <ResponsiveContainer width=\"100%\" height={280}>\n              <PieChart>\n                <Pie\n                  data={distributionData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  labelLine={false}\n                  label={renderCustomizedLabel}\n                  outerRadius={100}\n                  fill=\"#8884d8\"\n                  dataKey=\"percentage\"\n                  nameKey=\"type\"\n                >\n                  {distributionData.map((entry, index) => (\n                    <Cell\n                      key={`cell-${index}`}\n                      fill={COLORS[index % COLORS.length]}\n                    />\n                  ))}\n                </Pie>\n                <Tooltip content={<CustomTooltip />} />\n              </PieChart>\n            </ResponsiveContainer>\n          </div>\n\n          {/* Summary Statistics */}\n          <div className=\"space-y-4\">\n            <h4 className=\"font-semibold text-gray-800\">Market Composition</h4>\n            {distributionData.map((item, index) => (\n              <div\n                key={item.type}\n                className=\"flex items-center justify-between p-3 rounded-lg bg-gray-50\"\n              >\n                <div className=\"flex items-center space-x-3\">\n                  <div\n                    className=\"w-4 h-4 rounded-full\"\n                    style={{ backgroundColor: COLORS[index % COLORS.length] }}\n                  />\n                  <span className=\"font-medium text-gray-700\">{item.type}</span>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"font-bold text-gray-800\">{item.percentage}%</p>\n                  <p className=\"text-xs text-gray-500\">\n                    {item.count.toLocaleString()} units\n                  </p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      ) : (\n        <div className=\"flex items-center justify-center h-64 bg-gray-50 rounded-lg\">\n          <div className=\"text-center\">\n            <div className=\"text-4xl mb-4\">📊</div>\n            <p className=\"text-gray-600 text-lg\">No data available</p>\n            <p className=\"text-gray-500 text-sm\">\n              Housing distribution data for \"{selectedRegion}\" is not available\n            </p>\n          </div>\n        </div>\n      )}\n\n      {/* Market Insights */}\n      {distributionData.length > 0 && (\n        <div className=\"mt-6 p-4 bg-blue-50 rounded-lg\">\n          <h4 className=\"font-semibold text-blue-800 mb-2\">Market Insights</h4>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n            <div>\n              <span className=\"text-blue-700 font-medium\">Dominant Type:</span>\n              <span className=\"ml-2 text-blue-600\">\n                {\n                  distributionData.reduce((prev, current) =>\n                    prev.percentage > current.percentage ? prev : current\n                  ).type\n                }{' '}\n                (\n                {\n                  distributionData.reduce((prev, current) =>\n                    prev.percentage > current.percentage ? prev : current\n                  ).percentage\n                }\n                %)\n              </span>\n            </div>\n            <div>\n              <span className=\"text-blue-700 font-medium\">\n                Total Housing Stock:\n              </span>\n              <span className=\"ml-2 text-blue-600\">\n                {distributionData\n                  .reduce((sum, item) => sum + item.count, 0)\n                  .toLocaleString()}{' '}\n                units\n              </span>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* No Data Message */}\n      {distributionData.length === 0 && (\n        <div className=\"mt-6 p-4 bg-gray-50 rounded-lg text-center\">\n          <p className=\"text-gray-600\">\n            No housing distribution data available for {selectedRegion}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default HousingTypeDistributionChart;\n","import React from 'react';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from 'recharts';\nimport { housingData } from '../../data/housingData';\n\nfunction PricePerSqFtChart({ selectedRegion }) {\n  const sqFtData = housingData.pricePerSqFt[selectedRegion] || [];\n\n  const CustomTooltip = ({ active, payload, label }) => {\n    if (active && payload && payload.length) {\n      const data = payload[0].payload;\n      return (\n        <div className=\"bg-white p-4 rounded-lg shadow-xl border border-gray-200\">\n          <p className=\"font-bold text-gray-800 mb-2\">{label}</p>\n          <div className=\"space-y-1\">\n            <p className=\"text-sm\">\n              <span className=\"text-gray-600\">Price per Sq Ft:</span>\n              <span className=\"font-medium ml-2\">${data.pricePerSqFt}</span>\n            </p>\n            <p className=\"text-sm\">\n              <span className=\"text-gray-600\">Avg Size:</span>\n              <span className=\"font-medium ml-2\">\n                {data.avgSqFt.toLocaleString()} sq ft\n              </span>\n            </p>\n            <p className=\"text-sm\">\n              <span className=\"text-gray-600\">Typical Price:</span>\n              <span className=\"font-medium ml-2\">\n                ${(data.pricePerSqFt * data.avgSqFt).toLocaleString()}\n              </span>\n            </p>\n          </div>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  const formatPrice = value => `$${value}`;\n\n  return (\n    <div>\n      <h3 className=\"text-lg font-bold text-gray-800 mb-4 flex items-center\">\n        <span className=\"mr-2\">📏</span>\n        Price per Square Foot Analysis - {selectedRegion}\n      </h3>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Bar Chart */}\n        <div className=\"lg:col-span-2\">\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <BarChart\n              data={sqFtData}\n              margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n              <XAxis\n                dataKey=\"type\"\n                tick={{ fontSize: 12 }}\n                tickLine={false}\n                axisLine={{ stroke: '#e5e7eb' }}\n              />\n              <YAxis\n                tickFormatter={formatPrice}\n                tick={{ fontSize: 12 }}\n                tickLine={false}\n                axisLine={{ stroke: '#e5e7eb' }}\n              />\n              <Tooltip\n                content={<CustomTooltip />}\n                cursor={{ fill: 'rgba(59, 130, 246, 0.1)' }}\n              />\n              <Legend />\n              <Bar\n                dataKey=\"pricePerSqFt\"\n                name=\"Price per Sq Ft\"\n                fill=\"#3B82F6\"\n                radius={[8, 8, 0, 0]}\n              />\n            </BarChart>\n          </ResponsiveContainer>\n        </div>\n\n        {/* Summary Cards */}\n        <div className=\"space-y-4\">\n          <h4 className=\"font-semibold text-gray-800\">Price Efficiency</h4>\n          {sqFtData.map((item, index) => {\n            const efficiency = item.pricePerSqFt;\n            const isHighEfficiency = efficiency < 750;\n            const isMediumEfficiency = efficiency >= 750 && efficiency < 850;\n\n            return (\n              <div\n                key={item.type}\n                className={`p-3 rounded-lg border-l-4 ${\n                  isHighEfficiency\n                    ? 'bg-green-50 border-green-500'\n                    : isMediumEfficiency\n                      ? 'bg-yellow-50 border-yellow-500'\n                      : 'bg-red-50 border-red-500'\n                }`}\n              >\n                <div className=\"flex justify-between items-start\">\n                  <div>\n                    <p className=\"font-medium text-gray-800\">{item.type}</p>\n                    <p className=\"text-xs text-gray-500\">\n                      {item.avgSqFt.toLocaleString()} sq ft avg\n                    </p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-bold text-gray-800\">\n                      ${item.pricePerSqFt}\n                    </p>\n                    <p\n                      className={`text-xs ${\n                        isHighEfficiency\n                          ? 'text-green-600'\n                          : isMediumEfficiency\n                            ? 'text-yellow-600'\n                            : 'text-red-600'\n                      }`}\n                    >\n                      {isHighEfficiency\n                        ? 'Efficient'\n                        : isMediumEfficiency\n                          ? 'Moderate'\n                          : 'Premium'}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Market Analysis */}\n      <div className=\"mt-6 grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <div className=\"bg-blue-50 rounded-lg p-4\">\n          <h5 className=\"font-semibold text-blue-800 mb-1\">Most Affordable</h5>\n          <p className=\"text-sm text-blue-600\">\n            {\n              sqFtData.reduce((prev, current) =>\n                prev.pricePerSqFt < current.pricePerSqFt ? prev : current\n              ).type\n            }{' '}\n            at $\n            {\n              sqFtData.reduce((prev, current) =>\n                prev.pricePerSqFt < current.pricePerSqFt ? prev : current\n              ).pricePerSqFt\n            }\n            /sq ft\n          </p>\n        </div>\n\n        <div className=\"bg-purple-50 rounded-lg p-4\">\n          <h5 className=\"font-semibold text-purple-800 mb-1\">Premium Option</h5>\n          <p className=\"text-sm text-purple-600\">\n            {\n              sqFtData.reduce((prev, current) =>\n                prev.pricePerSqFt > current.pricePerSqFt ? prev : current\n              ).type\n            }{' '}\n            at $\n            {\n              sqFtData.reduce((prev, current) =>\n                prev.pricePerSqFt > current.pricePerSqFt ? prev : current\n              ).pricePerSqFt\n            }\n            /sq ft\n          </p>\n        </div>\n\n        <div className=\"bg-green-50 rounded-lg p-4\">\n          <h5 className=\"font-semibold text-green-800 mb-1\">Price Range</h5>\n          <p className=\"text-sm text-green-600\">\n            ${Math.min(...sqFtData.map(d => d.pricePerSqFt))} - $\n            {Math.max(...sqFtData.map(d => d.pricePerSqFt))} per sq ft\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default PricePerSqFtChart;\n","import React from 'react';\nimport {\n  ScatterChart,\n  Scatter,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n} from 'recharts';\nimport { housingData } from '../../data/housingData';\n\nfunction MarketVelocityChart({ selectedRegion }) {\n  const velocityData = housingData.marketVelocity[selectedRegion] || [];\n\n  // Transform data for scatter plot\n  const scatterData = velocityData.map(item => ({\n    ...item,\n    x: item.daysOnMarket,\n    y: item.avgPrice / 1000000, // Convert to millions for better display\n    z: item.salesVolume, // This will determine bubble size\n  }));\n\n  const COLORS = ['#3B82F6', '#10B981', '#F59E0B', '#EF4444'];\n\n  const CustomTooltip = ({ active, payload }) => {\n    if (active && payload && payload.length) {\n      const data = payload[0].payload;\n      return (\n        <div className=\"bg-white p-4 rounded-lg shadow-xl border border-gray-200\">\n          <p className=\"font-bold text-gray-800 mb-2\">{data.type}</p>\n          <div className=\"space-y-1\">\n            <p className=\"text-sm\">\n              <span className=\"text-gray-600\">Days on Market:</span>\n              <span className=\"font-medium ml-2\">{data.daysOnMarket} days</span>\n            </p>\n            <p className=\"text-sm\">\n              <span className=\"text-gray-600\">Average Price:</span>\n              <span className=\"font-medium ml-2\">\n                ${data.avgPrice.toLocaleString()}\n              </span>\n            </p>\n            <p className=\"text-sm\">\n              <span className=\"text-gray-600\">Monthly Sales:</span>\n              <span className=\"font-medium ml-2\">{data.salesVolume} units</span>\n            </p>\n            <p className=\"text-xs text-gray-500 mt-2\">\n              {data.daysOnMarket < 20\n                ? 'Fast-moving market'\n                : data.daysOnMarket < 30\n                  ? 'Moderate pace'\n                  : 'Slower market'}\n            </p>\n          </div>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  const CustomDot = props => {\n    const { cx, cy, payload, index } = props;\n    const radius = Math.sqrt(payload.salesVolume) / 8; // Scale bubble size\n\n    return (\n      <circle\n        cx={cx}\n        cy={cy}\n        r={Math.max(radius, 8)} // Minimum radius of 8\n        fill={COLORS[index % COLORS.length]}\n        fillOpacity={0.7}\n        stroke={COLORS[index % COLORS.length]}\n        strokeWidth={2}\n        className=\"hover:fill-opacity-90 transition-all duration-200\"\n      />\n    );\n  };\n\n  return (\n    <div>\n      <h3 className=\"text-lg font-bold text-gray-800 mb-4 flex items-center\">\n        <span className=\"mr-2\">⚡</span>\n        Market Velocity Analysis - {selectedRegion}\n      </h3>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Scatter Plot */}\n        <div className=\"lg:col-span-2\">\n          <ResponsiveContainer width=\"100%\" height={350}>\n            <ScatterChart margin={{ top: 20, right: 20, bottom: 20, left: 20 }}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n              <XAxis\n                type=\"number\"\n                dataKey=\"x\"\n                domain={['dataMin - 2', 'dataMax + 2']}\n                name=\"Days on Market\"\n                tick={{ fontSize: 12 }}\n                tickLine={false}\n                axisLine={{ stroke: '#e5e7eb' }}\n                label={{\n                  value: 'Days on Market',\n                  position: 'insideBottom',\n                  offset: -10,\n                }}\n              />\n              <YAxis\n                type=\"number\"\n                dataKey=\"y\"\n                domain={['dataMin - 0.1', 'dataMax + 0.1']}\n                name=\"Average Price\"\n                tick={{ fontSize: 12 }}\n                tickLine={false}\n                axisLine={{ stroke: '#e5e7eb' }}\n                tickFormatter={value => `$${value.toFixed(1)}M`}\n                label={{\n                  value: 'Avg Price (Millions)',\n                  angle: -90,\n                  position: 'insideLeft',\n                }}\n              />\n              <Tooltip content={<CustomTooltip />} />\n              <Scatter data={scatterData} shape={<CustomDot />} />\n            </ScatterChart>\n          </ResponsiveContainer>\n\n          <div className=\"mt-4 flex items-center justify-center space-x-6 text-xs text-gray-600\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-3 h-3 rounded-full bg-gray-300\"></div>\n              <span>Bubble size = Sales Volume</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <span>←</span>\n              <span>Faster Sales</span>\n              <span>|</span>\n              <span>Slower Sales</span>\n              <span>→</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Performance Metrics */}\n        <div className=\"space-y-4\">\n          <h4 className=\"font-semibold text-gray-800\">Market Performance</h4>\n          {velocityData.map((item, index) => {\n            const velocity = item.daysOnMarket;\n            const isHot = velocity < 20;\n            const isModerate = velocity >= 20 && velocity < 30;\n\n            return (\n              <div\n                key={item.type}\n                className={`p-3 rounded-lg border-l-4 ${\n                  isHot\n                    ? 'bg-green-50 border-green-500'\n                    : isModerate\n                      ? 'bg-yellow-50 border-yellow-500'\n                      : 'bg-red-50 border-red-500'\n                }`}\n              >\n                <div className=\"flex justify-between items-start\">\n                  <div>\n                    <p className=\"font-medium text-gray-800\">{item.type}</p>\n                    <p className=\"text-xs text-gray-500\">\n                      {item.salesVolume} sales/month\n                    </p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-bold text-gray-800\">\n                      {item.daysOnMarket} days\n                    </p>\n                    <div className=\"flex items-center space-x-1\">\n                      <div\n                        className={`w-2 h-2 rounded-full ${\n                          isHot\n                            ? 'bg-green-500'\n                            : isModerate\n                              ? 'bg-yellow-500'\n                              : 'bg-red-500'\n                        }`}\n                      />\n                      <p\n                        className={`text-xs ${\n                          isHot\n                            ? 'text-green-600'\n                            : isModerate\n                              ? 'text-yellow-600'\n                              : 'text-red-600'\n                        }`}\n                      >\n                        {isHot ? 'Hot' : isModerate ? 'Warm' : 'Cool'}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Market Insights */}\n      <div className=\"mt-6 grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <div className=\"bg-green-50 rounded-lg p-4\">\n          <h5 className=\"font-semibold text-green-800 mb-1\">Fastest Moving</h5>\n          <p className=\"text-sm text-green-600\">\n            {\n              velocityData.reduce((prev, current) =>\n                prev.daysOnMarket < current.daysOnMarket ? prev : current\n              ).type\n            }{' '}\n            -{' '}\n            {\n              velocityData.reduce((prev, current) =>\n                prev.daysOnMarket < current.daysOnMarket ? prev : current\n              ).daysOnMarket\n            }{' '}\n            days\n          </p>\n        </div>\n\n        <div className=\"bg-blue-50 rounded-lg p-4\">\n          <h5 className=\"font-semibold text-blue-800 mb-1\">Highest Volume</h5>\n          <p className=\"text-sm text-blue-600\">\n            {\n              velocityData.reduce((prev, current) =>\n                prev.salesVolume > current.salesVolume ? prev : current\n              ).type\n            }{' '}\n            -{' '}\n            {\n              velocityData.reduce((prev, current) =>\n                prev.salesVolume > current.salesVolume ? prev : current\n              ).salesVolume\n            }{' '}\n            sales/month\n          </p>\n        </div>\n\n        <div className=\"bg-purple-50 rounded-lg p-4\">\n          <h5 className=\"font-semibold text-purple-800 mb-1\">\n            Market Temperature\n          </h5>\n          <p className=\"text-sm text-purple-600\">\n            {velocityData.filter(d => d.daysOnMarket < 25).length >\n            velocityData.length / 2\n              ? 'Hot Market'\n              : 'Balanced Market'}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default MarketVelocityChart;\n","import React, { useState } from 'react';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell,\n} from 'recharts';\nimport { housingData } from '../../data/housingData';\n\nfunction NewVsResaleChart({ selectedRegion }) {\n  const [viewMode, setViewMode] = useState('units'); // 'units', 'prices', 'distribution'\n\n  const newVsResaleData = housingData.newVsResale[selectedRegion] || [];\n\n  // Transform data for different visualizations\n  const getChartData = () => {\n    // Add error handling for missing data\n    if (!newVsResaleData || newVsResaleData.length === 0) {\n      return [];\n    }\n\n    if (viewMode === 'distribution') {\n      const totalNew = newVsResaleData.reduce(\n        (sum, item) => sum + (item.newUnits || 0),\n        0\n      );\n      const totalResale = newVsResaleData.reduce(\n        (sum, item) => sum + (item.resaleUnits || 0),\n        0\n      );\n      const total = totalNew + totalResale;\n\n      if (total === 0) return [];\n\n      return [\n        {\n          name: 'New Homes',\n          value: totalNew,\n          percentage: ((totalNew / total) * 100).toFixed(1),\n        },\n        {\n          name: 'Resale Homes',\n          value: totalResale,\n          percentage: ((totalResale / total) * 100).toFixed(1),\n        },\n      ];\n    }\n\n    return newVsResaleData.map(item => {\n      const totalUnits = (item.newUnits || 0) + (item.resaleUnits || 0);\n      const newPercentage =\n        totalUnits > 0 ? (item.newUnits / totalUnits) * 100 : 0;\n      const pricePremium =\n        item.resaleAvgPrice > 0\n          ? ((item.newAvgPrice - item.resaleAvgPrice) / item.resaleAvgPrice) *\n            100\n          : 0;\n\n      return {\n        type: item.type,\n        newUnits: item.newUnits || 0,\n        resaleUnits: item.resaleUnits || 0,\n        totalUnits: totalUnits,\n        newPercentage: newPercentage,\n        resalePercentage: 100 - newPercentage,\n        newAvgPrice: item.newAvgPrice || 0,\n        resaleAvgPrice: item.resaleAvgPrice || 0,\n        pricePremium: pricePremium,\n      };\n    });\n  };\n\n  const chartData = getChartData();\n\n  // Calculate summary statistics with error handling\n  const totalNewUnits = newVsResaleData.reduce(\n    (sum, item) => sum + (item.newUnits || 0),\n    0\n  );\n  const totalResaleUnits = newVsResaleData.reduce(\n    (sum, item) => sum + (item.resaleUnits || 0),\n    0\n  );\n  const totalUnits = totalNewUnits + totalResaleUnits;\n  const newMarketShare =\n    totalUnits > 0 ? ((totalNewUnits / totalUnits) * 100).toFixed(1) : '0.0';\n\n  const avgNewPrice =\n    totalNewUnits > 0\n      ? newVsResaleData.reduce(\n          (sum, item) => sum + (item.newAvgPrice || 0) * (item.newUnits || 0),\n          0\n        ) / totalNewUnits\n      : 0;\n  const avgResalePrice =\n    totalResaleUnits > 0\n      ? newVsResaleData.reduce(\n          (sum, item) =>\n            sum + (item.resaleAvgPrice || 0) * (item.resaleUnits || 0),\n          0\n        ) / totalResaleUnits\n      : 0;\n  const avgPricePremium =\n    avgResalePrice > 0\n      ? (((avgNewPrice - avgResalePrice) / avgResalePrice) * 100).toFixed(1)\n      : '0.0';\n\n  const CustomTooltip = ({ active, payload, label }) => {\n    if (active && payload && payload.length) {\n      const data = payload[0].payload;\n\n      if (viewMode === 'distribution') {\n        return (\n          <div className=\"bg-white p-4 rounded-lg shadow-xl border border-gray-200\">\n            <p className=\"font-bold text-gray-800 mb-2\">{data.name}</p>\n            <div className=\"space-y-1\">\n              <p className=\"text-sm\">\n                <span className=\"text-gray-600\">Units:</span>\n                <span className=\"font-medium ml-2\">\n                  {data.value.toLocaleString()}\n                </span>\n              </p>\n              <p className=\"text-sm\">\n                <span className=\"text-gray-600\">Market Share:</span>\n                <span className=\"font-medium ml-2\">{data.percentage}%</span>\n              </p>\n            </div>\n          </div>\n        );\n      }\n\n      return (\n        <div className=\"bg-white p-4 rounded-lg shadow-xl border border-gray-200\">\n          <p className=\"font-bold text-gray-800 mb-2\">{label}</p>\n          <div className=\"space-y-1\">\n            {viewMode === 'units' ? (\n              <>\n                <p className=\"text-sm\">\n                  <span className=\"text-gray-600\">New Units:</span>\n                  <span className=\"font-medium ml-2\">\n                    {data.newUnits} ({data.newPercentage.toFixed(1)}%)\n                  </span>\n                </p>\n                <p className=\"text-sm\">\n                  <span className=\"text-gray-600\">Resale Units:</span>\n                  <span className=\"font-medium ml-2\">\n                    {data.resaleUnits} ({data.resalePercentage.toFixed(1)}%)\n                  </span>\n                </p>\n                <p className=\"text-sm\">\n                  <span className=\"text-gray-600\">Total:</span>\n                  <span className=\"font-medium ml-2\">\n                    {data.totalUnits} units\n                  </span>\n                </p>\n              </>\n            ) : (\n              <>\n                <p className=\"text-sm\">\n                  <span className=\"text-gray-600\">New Avg Price:</span>\n                  <span className=\"font-medium ml-2\">\n                    ${data.newAvgPrice.toLocaleString()}\n                  </span>\n                </p>\n                <p className=\"text-sm\">\n                  <span className=\"text-gray-600\">Resale Avg Price:</span>\n                  <span className=\"font-medium ml-2\">\n                    ${data.resaleAvgPrice.toLocaleString()}\n                  </span>\n                </p>\n                <p className=\"text-sm\">\n                  <span className=\"text-gray-600\">New Premium:</span>\n                  <span className=\"font-medium ml-2 text-blue-600\">\n                    +{data.pricePremium.toFixed(1)}%\n                  </span>\n                </p>\n              </>\n            )}\n          </div>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  const formatCurrency = value => `$${(value / 1000).toFixed(0)}k`;\n  const formatUnits = value => value.toLocaleString();\n\n  const PIE_COLORS = ['#3B82F6', '#10B981'];\n\n  return (\n    <div>\n      <div className=\"flex flex-col lg:flex-row justify-between items-start lg:items-center mb-6\">\n        <div>\n          <h3 className=\"text-lg font-bold text-gray-800 flex items-center mb-2\">\n            <span className=\"mr-2\">🏗️</span>\n            New vs Resale Housing Analysis - {selectedRegion}\n          </h3>\n          <p className=\"text-sm text-gray-600\">\n            Market composition and pricing comparison between new construction\n            and resale homes\n          </p>\n        </div>\n\n        <div className=\"flex space-x-2 mt-4 lg:mt-0\">\n          <button\n            onClick={() => setViewMode('units')}\n            className={`\n              px-3 py-2 text-sm font-medium rounded-lg transition-all duration-300\n              ${\n                viewMode === 'units'\n                  ? 'bg-blue-600 text-white shadow-md'\n                  : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n              }\n            `}\n          >\n            Unit Distribution\n          </button>\n          <button\n            onClick={() => setViewMode('prices')}\n            className={`\n              px-3 py-2 text-sm font-medium rounded-lg transition-all duration-300\n              ${\n                viewMode === 'prices'\n                  ? 'bg-green-600 text-white shadow-md'\n                  : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n              }\n            `}\n          >\n            Price Comparison\n          </button>\n          <button\n            onClick={() => setViewMode('distribution')}\n            className={`\n              px-3 py-2 text-sm font-medium rounded-lg transition-all duration-300\n              ${\n                viewMode === 'distribution'\n                  ? 'bg-purple-600 text-white shadow-md'\n                  : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n              }\n            `}\n          >\n            Market Split\n          </button>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n        {/* Chart */}\n        <div className=\"lg:col-span-3\">\n          {chartData.length === 0 ? (\n            <div className=\"flex items-center justify-center h-96 bg-gray-50 rounded-lg\">\n              <div className=\"text-center\">\n                <p className=\"text-gray-500 text-lg\">No data available</p>\n                <p className=\"text-gray-400 text-sm\">\n                  Please check data configuration for {selectedRegion}\n                </p>\n              </div>\n            </div>\n          ) : viewMode === 'distribution' ? (\n            <ResponsiveContainer width=\"100%\" height={400}>\n              <PieChart>\n                <Pie\n                  data={chartData}\n                  dataKey=\"value\"\n                  nameKey=\"name\"\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  outerRadius={120}\n                  label={({ name, percentage }) => `${name}: ${percentage}%`}\n                  labelLine={false}\n                >\n                  {chartData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={PIE_COLORS[index]} />\n                  ))}\n                </Pie>\n                <Tooltip content={<CustomTooltip />} />\n                <Legend />\n              </PieChart>\n            </ResponsiveContainer>\n          ) : (\n            <ResponsiveContainer width=\"100%\" height={400}>\n              <BarChart\n                data={chartData}\n                margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n                <XAxis\n                  dataKey=\"type\"\n                  tick={{ fontSize: 12 }}\n                  tickLine={false}\n                  axisLine={{ stroke: '#e5e7eb' }}\n                />\n                <YAxis\n                  tickFormatter={\n                    viewMode === 'units' ? formatUnits : formatCurrency\n                  }\n                  tick={{ fontSize: 12 }}\n                  tickLine={false}\n                  axisLine={{ stroke: '#e5e7eb' }}\n                />\n                <Tooltip content={<CustomTooltip />} />\n                <Legend />\n\n                {/* Unit Distribution Bars */}\n                <Bar\n                  dataKey=\"newUnits\"\n                  stackId={viewMode === 'units' ? 'units' : undefined}\n                  name=\"New Construction\"\n                  fill={viewMode === 'units' ? '#3B82F6' : 'transparent'}\n                  radius={viewMode === 'units' ? [0, 0, 0, 0] : [0, 0, 0, 0]}\n                  hide={viewMode !== 'units'}\n                />\n                <Bar\n                  dataKey=\"resaleUnits\"\n                  stackId={viewMode === 'units' ? 'units' : undefined}\n                  name=\"Resale\"\n                  fill={viewMode === 'units' ? '#10B981' : 'transparent'}\n                  radius={viewMode === 'units' ? [4, 4, 0, 0] : [0, 0, 0, 0]}\n                  hide={viewMode !== 'units'}\n                />\n\n                {/* Price Comparison Bars */}\n                <Bar\n                  dataKey=\"newAvgPrice\"\n                  name=\"New Construction Price\"\n                  fill={viewMode === 'prices' ? '#3B82F6' : 'transparent'}\n                  radius={viewMode === 'prices' ? [4, 4, 0, 0] : [0, 0, 0, 0]}\n                  hide={viewMode !== 'prices'}\n                />\n                <Bar\n                  dataKey=\"resaleAvgPrice\"\n                  name=\"Resale Price\"\n                  fill={viewMode === 'prices' ? '#10B981' : 'transparent'}\n                  radius={viewMode === 'prices' ? [4, 4, 0, 0] : [0, 0, 0, 0]}\n                  hide={viewMode !== 'prices'}\n                />\n              </BarChart>\n            </ResponsiveContainer>\n          )}\n        </div>\n\n        {/* Summary Statistics */}\n        <div className=\"space-y-4\">\n          <h4 className=\"font-semibold text-gray-800\">Market Summary</h4>\n\n          <div className=\"p-3 bg-blue-50 rounded-lg border-l-4 border-blue-500\">\n            <p className=\"text-sm text-blue-700 font-medium\">\n              New Construction\n            </p>\n            <p className=\"text-2xl font-bold text-blue-800\">\n              {newMarketShare}%\n            </p>\n            <p className=\"text-xs text-blue-600\">of total sales</p>\n          </div>\n\n          <div className=\"p-3 bg-green-50 rounded-lg border-l-4 border-green-500\">\n            <p className=\"text-sm text-green-700 font-medium\">Total Units</p>\n            <p className=\"text-2xl font-bold text-green-800\">\n              {totalUnits.toLocaleString()}\n            </p>\n            <p className=\"text-xs text-green-600\">monthly sales</p>\n          </div>\n\n          <div className=\"p-3 bg-purple-50 rounded-lg border-l-4 border-purple-500\">\n            <p className=\"text-sm text-purple-700 font-medium\">New Premium</p>\n            <p className=\"text-2xl font-bold text-purple-800\">\n              +{avgPricePremium}%\n            </p>\n            <p className=\"text-xs text-purple-600\">vs resale prices</p>\n          </div>\n\n          <div className=\"p-3 bg-gray-50 rounded-lg border-l-4 border-gray-400\">\n            <p className=\"text-sm text-gray-700 font-medium\">Price Gap</p>\n            <p className=\"text-2xl font-bold text-gray-800\">\n              ${((avgNewPrice - avgResalePrice) / 1000).toFixed(0)}k\n            </p>\n            <p className=\"text-xs text-gray-600\">average difference</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Type Analysis - Only show for units and prices modes */}\n      {viewMode !== 'distribution' && (\n        <div className=\"mt-6\">\n          <h4 className=\"font-semibold text-gray-800 mb-4\">\n            Analysis by Housing Type\n          </h4>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            {chartData.map((item, index) => {\n              const isNewDominated = (item.newPercentage || 0) > 50;\n\n              return (\n                <div\n                  key={item.type || index}\n                  className={`\n                    p-4 rounded-lg border-2 border-gray-200 hover:border-gray-300 transition-all duration-200\n                    ${isNewDominated ? 'bg-blue-50' : 'bg-green-50'}\n                  `}\n                >\n                  <h5 className=\"font-semibold text-gray-800 mb-2\">\n                    {item.type}\n                  </h5>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-gray-600\">New:</span>\n                      <span className=\"font-bold text-blue-600\">\n                        {item.newUnits || 0} units\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-gray-600\">Resale:</span>\n                      <span className=\"font-bold text-green-600\">\n                        {item.resaleUnits || 0} units\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-gray-600\">New %:</span>\n                      <span\n                        className={`text-sm font-medium ${isNewDominated ? 'text-blue-600' : 'text-gray-600'}`}\n                      >\n                        {(item.newPercentage || 0).toFixed(1)}%\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-gray-600\">Premium:</span>\n                      <span className=\"text-sm font-medium text-purple-600\">\n                        +{(item.pricePremium || 0).toFixed(1)}%\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      )}\n\n      {/* Market Split Analysis - Only show for distribution mode */}\n      {viewMode === 'distribution' && chartData.length > 0 && (\n        <div className=\"mt-6\">\n          <h4 className=\"font-semibold text-gray-800 mb-4\">\n            Market Composition\n          </h4>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {chartData.map((item, index) => (\n              <div\n                key={item.name || index}\n                className=\"p-6 rounded-lg border-2 border-gray-200 bg-gradient-to-br from-white to-gray-50\"\n              >\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h5 className=\"font-semibold text-gray-800\">{item.name}</h5>\n                  <div\n                    className={`w-4 h-4 rounded-full ${index === 0 ? 'bg-blue-500' : 'bg-green-500'}`}\n                  ></div>\n                </div>\n                <div className=\"space-y-3\">\n                  <div>\n                    <p className=\"text-3xl font-bold text-gray-800\">\n                      {item.value.toLocaleString()}\n                    </p>\n                    <p className=\"text-sm text-gray-600\">Total Units</p>\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold text-blue-600\">\n                      {item.percentage}%\n                    </p>\n                    <p className=\"text-sm text-gray-600\">Market Share</p>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                    <div\n                      className={`h-2 rounded-full ${index === 0 ? 'bg-blue-500' : 'bg-green-500'}`}\n                      style={{ width: `${item.percentage}%` }}\n                    ></div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Key Insights */}\n      <div className=\"mt-6 grid grid-cols-1 md:grid-cols-3 gap-4\">\n        {viewMode === 'distribution' ? (\n          <>\n            <div className=\"bg-blue-50 rounded-lg p-4\">\n              <h5 className=\"font-semibold text-blue-800 mb-2\">\n                Market Composition\n              </h5>\n              <p className=\"text-sm text-blue-600\">\n                New construction represents {newMarketShare}% of total market\n                sales, while resale homes make up the remaining{' '}\n                {(100 - parseFloat(newMarketShare)).toFixed(1)}%.\n              </p>\n            </div>\n\n            <div className=\"bg-green-50 rounded-lg p-4\">\n              <h5 className=\"font-semibold text-green-800 mb-2\">\n                Market Dynamics\n              </h5>\n              <p className=\"text-sm text-green-600\">\n                The market shows a{' '}\n                {parseFloat(newMarketShare) > 25 ? 'strong' : 'moderate'}{' '}\n                presence of new construction, indicating{' '}\n                {parseFloat(newMarketShare) > 25\n                  ? 'active development'\n                  : 'mature market conditions'}\n                .\n              </p>\n            </div>\n\n            <div className=\"bg-purple-50 rounded-lg p-4\">\n              <h5 className=\"font-semibold text-purple-800 mb-2\">\n                Investment Perspective\n              </h5>\n              <p className=\"text-sm text-purple-600\">\n                New homes command an average {avgPricePremium}% premium over\n                resale properties, reflecting modern amenities and construction\n                standards.\n              </p>\n            </div>\n          </>\n        ) : (\n          <>\n            <div className=\"bg-blue-50 rounded-lg p-4\">\n              <h5 className=\"font-semibold text-blue-800 mb-2\">\n                New Construction Trends\n              </h5>\n              <p className=\"text-sm text-blue-600\">\n                New construction represents {newMarketShare}% of sales, with\n                strongest presence in{' '}\n                {chartData.length > 0 &&\n                chartData[0].newPercentage !== undefined\n                  ? chartData\n                      .reduce((prev, current) =>\n                        (prev.newPercentage || 0) > (current.newPercentage || 0)\n                          ? prev\n                          : current\n                      )\n                      .type?.toLowerCase() || 'various'\n                  : 'various'}{' '}\n                segment.\n              </p>\n            </div>\n\n            <div className=\"bg-green-50 rounded-lg p-4\">\n              <h5 className=\"font-semibold text-green-800 mb-2\">\n                Resale Market Dominance\n              </h5>\n              <p className=\"text-sm text-green-600\">\n                Resale homes dominate overall sales volume, particularly in\n                established neighborhoods with mature housing stock and diverse\n                pricing options.\n              </p>\n            </div>\n\n            <div className=\"bg-purple-50 rounded-lg p-4\">\n              <h5 className=\"font-semibold text-purple-800 mb-2\">\n                Price Premium Analysis\n              </h5>\n              <p className=\"text-sm text-purple-600\">\n                New homes command an average {avgPricePremium}% premium,\n                reflecting modern features, energy efficiency, and updated\n                building standards.\n              </p>\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default NewVsResaleChart;\n","// Market Health Indicators Data\n// Comprehensive metrics for assessing overall market conditions\n\n// Price-to-income ratios by region (higher = less affordable)\nexport const priceToIncomeRatios = {\n  'Peel Region': { ratio: 12.8, benchmark: 10.0, status: 'Overvalued', trend: 'Rising' },\n  'Mississauga': { ratio: 13.5, benchmark: 10.0, status: 'Overvalued', trend: 'Rising' },\n  'Brampton': { ratio: 11.9, benchmark: 10.0, status: 'Overvalued', trend: 'Stable' },\n  'Caledon': { ratio: 15.2, benchmark: 10.0, status: 'Severely Overvalued', trend: 'Rising' }\n};\n\n// Market temperature indicators (0-100 scale)\nexport const marketTemperature = {\n  'Peel Region': {\n    overall: 78,\n    priceGrowth: 85,\n    salesVolume: 72,\n    inventory: 65,\n    timeOnMarket: 68,\n    status: 'Hot'\n  },\n  'Mississauga': {\n    overall: 82,\n    priceGrowth: 88,\n    salesVolume: 75,\n    inventory: 60,\n    timeOnMarket: 65,\n    status: 'Very Hot'\n  },\n  'Brampton': {\n    overall: 74,\n    priceGrowth: 80,\n    salesVolume: 78,\n    inventory: 70,\n    timeOnMarket: 72,\n    status: 'Hot'\n  },\n  'Caledon': {\n    overall: 68,\n    priceGrowth: 72,\n    salesVolume: 58,\n    inventory: 75,\n    timeOnMarket: 85,\n    status: 'Warm'\n  }\n};\n\n// Supply and demand metrics\nexport const supplyDemandMetrics = {\n  'Peel Region': {\n    monthsOfInventory: 2.1,\n    newListings: 1250,\n    salesVolume: 980,\n    absorptionRate: 78.4,\n    demandIndex: 85,\n    supplyIndex: 42\n  },\n  'Mississauga': {\n    monthsOfInventory: 1.8,\n    newListings: 520,\n    salesVolume: 420,\n    absorptionRate: 80.8,\n    demandIndex: 88,\n    supplyIndex: 38\n  },\n  'Brampton': {\n    monthsOfInventory: 2.3,\n    newListings: 580,\n    salesVolume: 465,\n    absorptionRate: 80.2,\n    demandIndex: 82,\n    supplyIndex: 45\n  },\n  'Caledon': {\n    monthsOfInventory: 3.2,\n    newListings: 150,\n    salesVolume: 95,\n    absorptionRate: 63.3,\n    demandIndex: 65,\n    supplyIndex: 58\n  }\n};\n\n// Market risk indicators\nexport const riskIndicators = {\n  'Peel Region': {\n    overvaluation: 'High',\n    interestRateSensitivity: 'Very High',\n    speculativeActivity: 'Moderate',\n    householdDebt: 'High',\n    overallRisk: 'High',\n    riskScore: 78\n  },\n  'Mississauga': {\n    overvaluation: 'Very High',\n    interestRateSensitivity: 'Very High',\n    speculativeActivity: 'High',\n    householdDebt: 'Very High',\n    overallRisk: 'Very High',\n    riskScore: 85\n  },\n  'Brampton': {\n    overvaluation: 'High',\n    interestRateSensitivity: 'High',\n    speculativeActivity: 'Moderate',\n    householdDebt: 'High',\n    overallRisk: 'High',\n    riskScore: 74\n  },\n  'Caledon': {\n    overvaluation: 'Very High',\n    interestRateSensitivity: 'High',\n    speculativeActivity: 'Low',\n    householdDebt: 'Moderate',\n    overallRisk: 'Moderate',\n    riskScore: 68\n  }\n};\n\n// Market health trends over time\nexport const marketHealthTrends = {\n  'Peel Region': [\n    { month: 'Jan 2024', healthScore: 65, priceGrowth: 8.2, riskLevel: 'Moderate' },\n    { month: 'Feb 2024', healthScore: 68, priceGrowth: 8.5, riskLevel: 'Moderate' },\n    { month: 'Mar 2024', healthScore: 72, priceGrowth: 9.1, riskLevel: 'High' },\n    { month: 'Apr 2024', healthScore: 75, priceGrowth: 9.8, riskLevel: 'High' },\n    { month: 'May 2024', healthScore: 78, priceGrowth: 10.2, riskLevel: 'High' },\n    { month: 'Jun 2024', healthScore: 76, priceGrowth: 9.9, riskLevel: 'High' },\n    { month: 'Jul 2024', healthScore: 79, priceGrowth: 10.5, riskLevel: 'High' },\n    { month: 'Aug 2024', healthScore: 81, priceGrowth: 11.1, riskLevel: 'High' },\n    { month: 'Sep 2024', healthScore: 78, priceGrowth: 10.8, riskLevel: 'High' },\n    { month: 'Oct 2024', healthScore: 82, priceGrowth: 11.4, riskLevel: 'Very High' },\n    { month: 'Nov 2024', healthScore: 80, priceGrowth: 11.0, riskLevel: 'High' },\n    { month: 'Dec 2024', healthScore: 79, priceGrowth: 10.7, riskLevel: 'High' },\n    { month: 'Jan 2025', healthScore: 77, priceGrowth: 10.3, riskLevel: 'High' },\n    { month: 'Feb 2025', healthScore: 78, priceGrowth: 10.6, riskLevel: 'High' }\n  ],\n  'Mississauga': [\n    { month: 'Jan 2024', healthScore: 70, priceGrowth: 9.5, riskLevel: 'High' },\n    { month: 'Feb 2024', healthScore: 73, priceGrowth: 9.8, riskLevel: 'High' },\n    { month: 'Mar 2024', healthScore: 76, priceGrowth: 10.4, riskLevel: 'High' },\n    { month: 'Apr 2024', healthScore: 78, priceGrowth: 11.1, riskLevel: 'Very High' },\n    { month: 'May 2024', healthScore: 81, priceGrowth: 11.5, riskLevel: 'Very High' },\n    { month: 'Jun 2024', healthScore: 79, priceGrowth: 11.2, riskLevel: 'Very High' },\n    { month: 'Jul 2024', healthScore: 83, priceGrowth: 11.8, riskLevel: 'Very High' },\n    { month: 'Aug 2024', healthScore: 85, priceGrowth: 12.4, riskLevel: 'Very High' },\n    { month: 'Sep 2024', healthScore: 82, priceGrowth: 12.1, riskLevel: 'Very High' },\n    { month: 'Oct 2024', healthScore: 86, priceGrowth: 12.7, riskLevel: 'Very High' },\n    { month: 'Nov 2024', healthScore: 84, priceGrowth: 12.3, riskLevel: 'Very High' },\n    { month: 'Dec 2024', healthScore: 83, priceGrowth: 12.0, riskLevel: 'Very High' },\n    { month: 'Jan 2025', healthScore: 81, priceGrowth: 11.6, riskLevel: 'Very High' },\n    { month: 'Feb 2025', healthScore: 82, priceGrowth: 11.9, riskLevel: 'Very High' }\n  ],\n  'Brampton': [\n    { month: 'Jan 2024', healthScore: 62, priceGrowth: 7.8, riskLevel: 'Moderate' },\n    { month: 'Feb 2024', healthScore: 65, priceGrowth: 8.1, riskLevel: 'Moderate' },\n    { month: 'Mar 2024', healthScore: 68, priceGrowth: 8.7, riskLevel: 'High' },\n    { month: 'Apr 2024', healthScore: 71, priceGrowth: 9.4, riskLevel: 'High' },\n    { month: 'May 2024', healthScore: 74, priceGrowth: 9.8, riskLevel: 'High' },\n    { month: 'Jun 2024', healthScore: 72, priceGrowth: 9.5, riskLevel: 'High' },\n    { month: 'Jul 2024', healthScore: 75, priceGrowth: 10.1, riskLevel: 'High' },\n    { month: 'Aug 2024', healthScore: 77, priceGrowth: 10.7, riskLevel: 'High' },\n    { month: 'Sep 2024', healthScore: 74, priceGrowth: 10.4, riskLevel: 'High' },\n    { month: 'Oct 2024', healthScore: 78, priceGrowth: 11.0, riskLevel: 'High' },\n    { month: 'Nov 2024', healthScore: 76, priceGrowth: 10.6, riskLevel: 'High' },\n    { month: 'Dec 2024', healthScore: 75, priceGrowth: 10.3, riskLevel: 'High' },\n    { month: 'Jan 2025', healthScore: 73, priceGrowth: 9.9, riskLevel: 'High' },\n    { month: 'Feb 2025', healthScore: 74, priceGrowth: 10.2, riskLevel: 'High' }\n  ],\n  'Caledon': [\n    { month: 'Jan 2024', healthScore: 58, priceGrowth: 6.2, riskLevel: 'Moderate' },\n    { month: 'Feb 2024', healthScore: 60, priceGrowth: 6.5, riskLevel: 'Moderate' },\n    { month: 'Mar 2024', healthScore: 62, priceGrowth: 6.9, riskLevel: 'Moderate' },\n    { month: 'Apr 2024', healthScore: 64, priceGrowth: 7.3, riskLevel: 'Moderate' },\n    { month: 'May 2024', healthScore: 66, priceGrowth: 7.7, riskLevel: 'Moderate' },\n    { month: 'Jun 2024', healthScore: 65, priceGrowth: 7.4, riskLevel: 'Moderate' },\n    { month: 'Jul 2024', healthScore: 67, priceGrowth: 7.8, riskLevel: 'Moderate' },\n    { month: 'Aug 2024', healthScore: 69, priceGrowth: 8.2, riskLevel: 'High' },\n    { month: 'Sep 2024', healthScore: 67, priceGrowth: 7.9, riskLevel: 'Moderate' },\n    { month: 'Oct 2024', healthScore: 70, priceGrowth: 8.3, riskLevel: 'High' },\n    { month: 'Nov 2024', healthScore: 69, priceGrowth: 8.0, riskLevel: 'High' },\n    { month: 'Dec 2024', healthScore: 68, priceGrowth: 7.7, riskLevel: 'Moderate' },\n    { month: 'Jan 2025', healthScore: 67, priceGrowth: 7.4, riskLevel: 'Moderate' },\n    { month: 'Feb 2025', healthScore: 68, priceGrowth: 7.6, riskLevel: 'Moderate' }\n  ]\n};\n\n// Market predictions and forecasts\nexport const marketForecasts = {\n  'Peel Region': {\n    priceGrowthNext12Months: 8.5,\n    confidence: 'Moderate',\n    keyRisks: ['Interest Rate Increases', 'Affordability Crisis', 'Policy Changes'],\n    outlook: 'Cautiously Optimistic',\n    recommendedActions: ['Monitor Interest Rates', 'Assess Affordability Impact', 'Watch Supply Response']\n  },\n  'Mississauga': {\n    priceGrowthNext12Months: 7.2,\n    confidence: 'Low',\n    keyRisks: ['Overvaluation', 'Interest Rate Sensitivity', 'Speculative Activity'],\n    outlook: 'Concerning',\n    recommendedActions: ['Exercise Caution', 'Monitor Correction Signals', 'Assess Downside Risk']\n  },\n  'Brampton': {\n    priceGrowthNext12Months: 9.1,\n    confidence: 'Moderate',\n    keyRisks: ['Affordability Constraints', 'Interest Rate Impact', 'Employment Trends'],\n    outlook: 'Positive',\n    recommendedActions: ['Monitor Employment', 'Track Affordability', 'Watch First-time Buyers']\n  },\n  'Caledon': {\n    priceGrowthNext12Months: 6.8,\n    confidence: 'High',\n    keyRisks: ['Limited Inventory', 'Infrastructure Constraints', 'Luxury Market Volatility'],\n    outlook: 'Stable',\n    recommendedActions: ['Monitor Luxury Trends', 'Track Infrastructure Development', 'Assess Supply Pipeline']\n  }\n};\n\n// Key performance indicators\nexport const keyPerformanceIndicators = {\n  overall: {\n    marketHealth: 76,\n    affordability: 32,\n    sustainability: 45,\n    growth: 88,\n    stability: 61\n  },\n  regional: {\n    'Peel Region': { health: 78, risk: 78, opportunity: 72 },\n    'Mississauga': { health: 82, risk: 85, opportunity: 68 },\n    'Brampton': { health: 74, risk: 74, opportunity: 76 },\n    'Caledon': { health: 68, risk: 68, opportunity: 70 }\n  }\n};","import React, { useState } from 'react';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  AreaChart,\n  Area,\n  Cell,\n} from 'recharts';\nimport {\n  priceToIncomeRatios,\n  marketTemperature,\n  supplyDemandMetrics,\n  riskIndicators,\n  marketHealthTrends,\n  marketForecasts,\n  keyPerformanceIndicators,\n} from '../../data/marketHealth';\n\nfunction MarketHealthDashboard() {\n  const [selectedRegion, setSelectedRegion] = useState('Peel Region');\n  const [viewMode, setViewMode] = useState('overview'); // 'overview', 'temperature', 'risk', 'trends', 'forecast'\n\n  const regions = Object.keys(marketTemperature);\n\n  // Get data based on view mode\n  const getChartData = () => {\n    switch (viewMode) {\n      case 'overview':\n        return regions.map(region => ({\n          region: region.replace(' Region', ''),\n          health: keyPerformanceIndicators.regional[region].health,\n          risk: keyPerformanceIndicators.regional[region].risk,\n          opportunity: keyPerformanceIndicators.regional[region].opportunity,\n          priceToIncome: priceToIncomeRatios[region].ratio,\n          temperature: marketTemperature[region].overall,\n        }));\n      case 'temperature':\n        const tempData = marketTemperature[selectedRegion];\n        return [\n          { metric: 'Price Growth', value: tempData.priceGrowth },\n          { metric: 'Sales Volume', value: tempData.salesVolume },\n          { metric: 'Inventory', value: tempData.inventory },\n          { metric: 'Time on Market', value: tempData.timeOnMarket },\n        ];\n      case 'risk':\n        return regions.map(region => ({\n          region: region.replace(' Region', ''),\n          riskScore: riskIndicators[region].riskScore,\n          overvaluation: riskIndicators[region].overvaluation,\n          interestSensitivity: riskIndicators[region].interestRateSensitivity,\n          priceToIncome: priceToIncomeRatios[region].ratio,\n        }));\n      case 'trends':\n        return marketHealthTrends[selectedRegion];\n      case 'forecast':\n        return regions.map(region => ({\n          region: region.replace(' Region', ''),\n          forecast: marketForecasts[region].priceGrowthNext12Months,\n          confidence: marketForecasts[region].confidence,\n          currentGrowth:\n            marketHealthTrends[region][marketHealthTrends[region].length - 1]\n              .priceGrowth,\n        }));\n      default:\n        return [];\n    }\n  };\n\n  const chartData = getChartData();\n\n  // Get health score color\n  const getHealthColor = score => {\n    if (score >= 80) return 'text-green-600';\n    if (score >= 70) return 'text-yellow-600';\n    if (score >= 60) return 'text-orange-600';\n    return 'text-red-600';\n  };\n\n  // Get temperature status color\n  const getTempColor = status => {\n    switch (status) {\n      case 'Very Hot':\n        return 'bg-red-600';\n      case 'Hot':\n        return 'bg-orange-500';\n      case 'Warm':\n        return 'bg-yellow-500';\n      case 'Cool':\n        return 'bg-blue-500';\n      default:\n        return 'bg-gray-500';\n    }\n  };\n\n  const CustomTooltip = ({ active, payload, label }) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className=\"bg-white p-4 rounded-lg shadow-xl border border-gray-200\">\n          <p className=\"font-bold text-gray-800 mb-2\">{label}</p>\n          <div className=\"space-y-1\">\n            {payload.map((entry, index) => (\n              <p key={index} className=\"text-sm\">\n                <span className=\"text-gray-600\">{entry.name}:</span>\n                <span\n                  className=\"font-medium ml-2\"\n                  style={{ color: entry.color }}\n                >\n                  {typeof entry.value === 'number'\n                    ? entry.name.includes('Growth') ||\n                      entry.name.includes('forecast')\n                      ? `${entry.value.toFixed(1)}%`\n                      : entry.value.toFixed(1)\n                    : entry.value}\n                </span>\n              </p>\n            ))}\n          </div>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  const COLORS = ['#3B82F6', '#10B981', '#F59E0B', '#EF4444', '#8B5CF6'];\n\n  return (\n    <div>\n      <div className=\"flex flex-col lg:flex-row justify-between items-start lg:items-center mb-6\">\n        <div>\n          <h3 className=\"text-lg font-bold text-gray-800 flex items-center mb-2\">\n            <span className=\"mr-2\">🏥</span>\n            Market Health Indicators Dashboard\n          </h3>\n          <p className=\"text-sm text-gray-600\">\n            Comprehensive market analysis including risk assessment,\n            temperature, and forecasts\n          </p>\n        </div>\n\n        <div className=\"flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-4 mt-4 lg:mt-0\">\n          {/* View Mode Selection */}\n          <div className=\"flex space-x-2\">\n            <button\n              onClick={() => setViewMode('overview')}\n              className={`\n                px-3 py-2 text-sm font-medium rounded-lg transition-all duration-300\n                ${\n                  viewMode === 'overview'\n                    ? 'bg-blue-600 text-white shadow-md'\n                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                }\n              `}\n            >\n              Overview\n            </button>\n            <button\n              onClick={() => setViewMode('temperature')}\n              className={`\n                px-3 py-2 text-sm font-medium rounded-lg transition-all duration-300\n                ${\n                  viewMode === 'temperature'\n                    ? 'bg-orange-600 text-white shadow-md'\n                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                }\n              `}\n            >\n              Temperature\n            </button>\n            <button\n              onClick={() => setViewMode('risk')}\n              className={`\n                px-3 py-2 text-sm font-medium rounded-lg transition-all duration-300\n                ${\n                  viewMode === 'risk'\n                    ? 'bg-red-600 text-white shadow-md'\n                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                }\n              `}\n            >\n              Risk Analysis\n            </button>\n            <button\n              onClick={() => setViewMode('trends')}\n              className={`\n                px-3 py-2 text-sm font-medium rounded-lg transition-all duration-300\n                ${\n                  viewMode === 'trends'\n                    ? 'bg-green-600 text-white shadow-md'\n                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                }\n              `}\n            >\n              Trends\n            </button>\n            <button\n              onClick={() => setViewMode('forecast')}\n              className={`\n                px-3 py-2 text-sm font-medium rounded-lg transition-all duration-300\n                ${\n                  viewMode === 'forecast'\n                    ? 'bg-purple-600 text-white shadow-md'\n                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                }\n              `}\n            >\n              Forecast\n            </button>\n          </div>\n\n          {/* Region Selection - Always visible, disabled when not applicable */}\n          <select\n            value={selectedRegion}\n            onChange={e => setSelectedRegion(e.target.value)}\n            disabled={!(viewMode === 'temperature' || viewMode === 'trends')}\n            className={`\n              min-w-[180px] px-3 py-2 text-sm border rounded-lg transition-all duration-300\n              ${\n                viewMode === 'temperature' || viewMode === 'trends'\n                  ? 'border-gray-300 bg-white text-gray-900 focus:ring-2 focus:ring-blue-500 focus:border-transparent cursor-pointer'\n                  : 'border-gray-200 bg-gray-100 text-gray-400 cursor-not-allowed'\n              }\n            `}\n          >\n            {regions.map(region => (\n              <option key={region} value={region}>\n                {region}\n              </option>\n            ))}\n          </select>\n        </div>\n      </div>\n\n      {/* Key Performance Indicators */}\n      <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4 mb-6\">\n        <div className=\"bg-gradient-to-r from-blue-50 to-blue-100 rounded-lg p-4 text-center\">\n          <p className=\"text-2xl font-bold text-blue-600\">\n            {keyPerformanceIndicators.overall.marketHealth}\n          </p>\n          <p className=\"text-sm text-blue-800\">Market Health</p>\n        </div>\n        <div className=\"bg-gradient-to-r from-red-50 to-red-100 rounded-lg p-4 text-center\">\n          <p className=\"text-2xl font-bold text-red-600\">\n            {keyPerformanceIndicators.overall.affordability}\n          </p>\n          <p className=\"text-sm text-red-800\">Affordability</p>\n        </div>\n        <div className=\"bg-gradient-to-r from-yellow-50 to-yellow-100 rounded-lg p-4 text-center\">\n          <p className=\"text-2xl font-bold text-yellow-600\">\n            {keyPerformanceIndicators.overall.sustainability}\n          </p>\n          <p className=\"text-sm text-yellow-800\">Sustainability</p>\n        </div>\n        <div className=\"bg-gradient-to-r from-green-50 to-green-100 rounded-lg p-4 text-center\">\n          <p className=\"text-2xl font-bold text-green-600\">\n            {keyPerformanceIndicators.overall.growth}\n          </p>\n          <p className=\"text-sm text-green-800\">Growth</p>\n        </div>\n        <div className=\"bg-gradient-to-r from-purple-50 to-purple-100 rounded-lg p-4 text-center\">\n          <p className=\"text-2xl font-bold text-purple-600\">\n            {keyPerformanceIndicators.overall.stability}\n          </p>\n          <p className=\"text-sm text-purple-800\">Stability</p>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n        {/* Chart */}\n        <div className=\"lg:col-span-3\">\n          <ResponsiveContainer width=\"100%\" height={400}>\n            {viewMode === 'trends' ? (\n              <AreaChart\n                data={chartData}\n                margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n              >\n                <defs>\n                  <linearGradient\n                    id=\"healthGradient\"\n                    x1=\"0\"\n                    y1=\"0\"\n                    x2=\"0\"\n                    y2=\"1\"\n                  >\n                    <stop offset=\"5%\" stopColor=\"#3B82F6\" stopOpacity={0.8} />\n                    <stop offset=\"95%\" stopColor=\"#3B82F6\" stopOpacity={0.1} />\n                  </linearGradient>\n                  <linearGradient\n                    id=\"growthGradient\"\n                    x1=\"0\"\n                    y1=\"0\"\n                    x2=\"0\"\n                    y2=\"1\"\n                  >\n                    <stop offset=\"5%\" stopColor=\"#10B981\" stopOpacity={0.8} />\n                    <stop offset=\"95%\" stopColor=\"#10B981\" stopOpacity={0.1} />\n                  </linearGradient>\n                </defs>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n                <XAxis\n                  dataKey=\"month\"\n                  tick={{ fontSize: 11 }}\n                  angle={-45}\n                  textAnchor=\"end\"\n                  height={80}\n                  tickLine={false}\n                  axisLine={{ stroke: '#e5e7eb' }}\n                />\n                <YAxis\n                  tick={{ fontSize: 12 }}\n                  tickLine={false}\n                  axisLine={{ stroke: '#e5e7eb' }}\n                />\n                <Tooltip content={<CustomTooltip />} />\n                <Legend />\n                <Area\n                  type=\"monotone\"\n                  dataKey=\"healthScore\"\n                  stroke=\"#3B82F6\"\n                  fill=\"url(#healthGradient)\"\n                  name=\"Health Score\"\n                />\n                <Area\n                  type=\"monotone\"\n                  dataKey=\"priceGrowth\"\n                  stroke=\"#10B981\"\n                  fill=\"url(#growthGradient)\"\n                  name=\"Price Growth (%)\"\n                />\n              </AreaChart>\n            ) : viewMode === 'temperature' ? (\n              <BarChart\n                data={chartData}\n                margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n                <XAxis\n                  dataKey=\"metric\"\n                  tick={{ fontSize: 12 }}\n                  tickLine={false}\n                  axisLine={{ stroke: '#e5e7eb' }}\n                />\n                <YAxis\n                  tick={{ fontSize: 12 }}\n                  tickLine={false}\n                  axisLine={{ stroke: '#e5e7eb' }}\n                  domain={[0, 100]}\n                />\n                <Tooltip content={<CustomTooltip />} />\n                <Bar\n                  dataKey=\"value\"\n                  name=\"Temperature Score\"\n                  radius={[8, 8, 0, 0]}\n                >\n                  {chartData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={COLORS[index]} />\n                  ))}\n                </Bar>\n              </BarChart>\n            ) : (\n              <BarChart\n                data={chartData}\n                margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n                <XAxis\n                  dataKey=\"region\"\n                  tick={{ fontSize: 12 }}\n                  tickLine={false}\n                  axisLine={{ stroke: '#e5e7eb' }}\n                />\n                <YAxis\n                  tick={{ fontSize: 12 }}\n                  tickLine={false}\n                  axisLine={{ stroke: '#e5e7eb' }}\n                />\n                <Tooltip content={<CustomTooltip />} />\n                <Legend />\n\n                {/* Overview Bars */}\n                <Bar\n                  dataKey=\"health\"\n                  name=\"Health Score\"\n                  fill={viewMode === 'overview' ? '#3B82F6' : 'transparent'}\n                  radius={viewMode === 'overview' ? [4, 4, 0, 0] : [0, 0, 0, 0]}\n                  hide={viewMode !== 'overview'}\n                />\n                <Bar\n                  dataKey=\"risk\"\n                  name=\"Risk Score\"\n                  fill={viewMode === 'overview' ? '#EF4444' : 'transparent'}\n                  radius={viewMode === 'overview' ? [4, 4, 0, 0] : [0, 0, 0, 0]}\n                  hide={viewMode !== 'overview'}\n                />\n                <Bar\n                  dataKey=\"opportunity\"\n                  name=\"Opportunity Score\"\n                  fill={viewMode === 'overview' ? '#10B981' : 'transparent'}\n                  radius={viewMode === 'overview' ? [4, 4, 0, 0] : [0, 0, 0, 0]}\n                  hide={viewMode !== 'overview'}\n                />\n\n                {/* Risk Analysis Bars */}\n                <Bar\n                  dataKey=\"riskScore\"\n                  name=\"Overall Risk Score\"\n                  fill={viewMode === 'risk' ? '#EF4444' : 'transparent'}\n                  radius={viewMode === 'risk' ? [4, 4, 0, 0] : [0, 0, 0, 0]}\n                  hide={viewMode !== 'risk'}\n                />\n                <Bar\n                  dataKey=\"priceToIncome\"\n                  name=\"Price-to-Income Ratio\"\n                  fill={viewMode === 'risk' ? '#F59E0B' : 'transparent'}\n                  radius={viewMode === 'risk' ? [4, 4, 0, 0] : [0, 0, 0, 0]}\n                  hide={viewMode !== 'risk'}\n                />\n\n                {/* Forecast Bars */}\n                <Bar\n                  dataKey=\"currentGrowth\"\n                  name=\"Current Growth %\"\n                  fill={viewMode === 'forecast' ? '#3B82F6' : 'transparent'}\n                  radius={viewMode === 'forecast' ? [4, 4, 0, 0] : [0, 0, 0, 0]}\n                  hide={viewMode !== 'forecast'}\n                />\n                <Bar\n                  dataKey=\"forecast\"\n                  name=\"12-Month Forecast %\"\n                  fill={viewMode === 'forecast' ? '#10B981' : 'transparent'}\n                  radius={viewMode === 'forecast' ? [4, 4, 0, 0] : [0, 0, 0, 0]}\n                  hide={viewMode !== 'forecast'}\n                />\n              </BarChart>\n            )}\n          </ResponsiveContainer>\n        </div>\n\n        {/* Summary Statistics */}\n        <div className=\"space-y-4\">\n          <h4 className=\"font-semibold text-gray-800\">Market Summary</h4>\n\n          {viewMode === 'overview' && (\n            <>\n              <div className=\"p-3 bg-blue-50 rounded-lg border-l-4 border-blue-500\">\n                <p className=\"text-sm text-blue-700 font-medium\">\n                  Market Leader\n                </p>\n                <p className=\"text-lg font-bold text-blue-800\">Mississauga</p>\n                <p className=\"text-xs text-blue-600\">Highest health score</p>\n              </div>\n\n              <div className=\"p-3 bg-red-50 rounded-lg border-l-4 border-red-500\">\n                <p className=\"text-sm text-red-700 font-medium\">Highest Risk</p>\n                <p className=\"text-lg font-bold text-red-800\">Mississauga</p>\n                <p className=\"text-xs text-red-600\">Risk score: 85</p>\n              </div>\n\n              <div className=\"p-3 bg-green-50 rounded-lg border-l-4 border-green-500\">\n                <p className=\"text-sm text-green-700 font-medium\">\n                  Best Opportunity\n                </p>\n                <p className=\"text-lg font-bold text-green-800\">Brampton</p>\n                <p className=\"text-xs text-green-600\">Opportunity score: 76</p>\n              </div>\n            </>\n          )}\n\n          {viewMode === 'temperature' && (\n            <>\n              <div\n                className={`p-3 rounded-lg border-l-4 ${getTempColor(marketTemperature[selectedRegion].status).replace('bg-', 'border-').replace('600', '500')}`}\n              >\n                <p className=\"text-sm font-medium\">Market Status</p>\n                <p className=\"text-lg font-bold\">\n                  {marketTemperature[selectedRegion].status}\n                </p>\n                <p className=\"text-xs\">\n                  Overall: {marketTemperature[selectedRegion].overall}/100\n                </p>\n              </div>\n\n              <div className=\"p-3 bg-gray-50 rounded-lg border-l-4 border-gray-400\">\n                <p className=\"text-sm text-gray-700 font-medium\">\n                  Supply Demand\n                </p>\n                <p className=\"text-lg font-bold text-gray-800\">\n                  {supplyDemandMetrics[selectedRegion].monthsOfInventory} months\n                </p>\n                <p className=\"text-xs text-gray-600\">Inventory supply</p>\n              </div>\n            </>\n          )}\n\n          {viewMode === 'risk' && (\n            <>\n              <div className=\"p-3 bg-red-50 rounded-lg border-l-4 border-red-500\">\n                <p className=\"text-sm text-red-700 font-medium\">\n                  Overvaluation Risk\n                </p>\n                <p className=\"text-lg font-bold text-red-800\">High</p>\n                <p className=\"text-xs text-red-600\">Above sustainable levels</p>\n              </div>\n\n              <div className=\"p-3 bg-orange-50 rounded-lg border-l-4 border-orange-500\">\n                <p className=\"text-sm text-orange-700 font-medium\">\n                  Interest Rate Risk\n                </p>\n                <p className=\"text-lg font-bold text-orange-800\">Very High</p>\n                <p className=\"text-xs text-orange-600\">\n                  Highly leveraged market\n                </p>\n              </div>\n            </>\n          )}\n\n          {viewMode === 'trends' && (\n            <>\n              <div className=\"p-3 bg-blue-50 rounded-lg border-l-4 border-blue-500\">\n                <p className=\"text-sm text-blue-700 font-medium\">\n                  Current Health\n                </p>\n                <p className=\"text-2xl font-bold text-blue-800\">\n                  {\n                    marketHealthTrends[selectedRegion][\n                      marketHealthTrends[selectedRegion].length - 1\n                    ].healthScore\n                  }\n                </p>\n                <p className=\"text-xs text-blue-600\">Health score</p>\n              </div>\n\n              <div className=\"p-3 bg-green-50 rounded-lg border-l-4 border-green-500\">\n                <p className=\"text-sm text-green-700 font-medium\">\n                  Price Growth\n                </p>\n                <p className=\"text-2xl font-bold text-green-800\">\n                  {marketHealthTrends[selectedRegion][\n                    marketHealthTrends[selectedRegion].length - 1\n                  ].priceGrowth.toFixed(1)}\n                  %\n                </p>\n                <p className=\"text-xs text-green-600\">Year-over-year</p>\n              </div>\n            </>\n          )}\n\n          {viewMode === 'forecast' && (\n            <>\n              <div className=\"p-3 bg-purple-50 rounded-lg border-l-4 border-purple-500\">\n                <p className=\"text-sm text-purple-700 font-medium\">\n                  Best Forecast\n                </p>\n                <p className=\"text-lg font-bold text-purple-800\">Brampton</p>\n                <p className=\"text-xs text-purple-600\">9.1% growth expected</p>\n              </div>\n\n              <div className=\"p-3 bg-yellow-50 rounded-lg border-l-4 border-yellow-500\">\n                <p className=\"text-sm text-yellow-700 font-medium\">\n                  Confidence Level\n                </p>\n                <p className=\"text-lg font-bold text-yellow-800\">Moderate</p>\n                <p className=\"text-xs text-yellow-600\">Market uncertainty</p>\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n\n      {/* Regional Breakdown */}\n      <div className=\"mt-6\">\n        <h4 className=\"font-semibold text-gray-800 mb-4\">\n          Regional Market Analysis\n        </h4>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {regions.map(region => {\n            const regionData = keyPerformanceIndicators.regional[region];\n            const tempData = marketTemperature[region];\n            const forecastData = marketForecasts[region];\n\n            return (\n              <div\n                key={region}\n                className=\"p-4 rounded-lg border-2 border-gray-200 hover:border-gray-300 transition-all duration-200 bg-gradient-to-br from-white to-gray-50\"\n              >\n                <div className=\"flex justify-between items-start mb-3\">\n                  <h5 className=\"font-semibold text-gray-800\">\n                    {region.replace(' Region', '')}\n                  </h5>\n                  <div\n                    className={`w-3 h-3 rounded-full ${getTempColor(tempData.status)}`}\n                  ></div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-gray-600\">Health:</span>\n                    <span\n                      className={`font-bold ${getHealthColor(regionData.health)}`}\n                    >\n                      {regionData.health}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-gray-600\">Risk:</span>\n                    <span className=\"font-bold text-red-600\">\n                      {regionData.risk}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-gray-600\">Temperature:</span>\n                    <span className=\"font-medium text-orange-600\">\n                      {tempData.status}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-gray-600\">Forecast:</span>\n                    <span className=\"font-medium text-purple-600\">\n                      {forecastData.priceGrowthNext12Months.toFixed(1)}%\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-gray-600\">P/I Ratio:</span>\n                    <span className=\"font-medium text-gray-800\">\n                      {priceToIncomeRatios[region].ratio.toFixed(1)}x\n                    </span>\n                  </div>\n                </div>\n\n                <div className=\"mt-3 pt-3 border-t border-gray-200\">\n                  <p className=\"text-xs text-gray-600 mb-1\">Outlook:</p>\n                  <p className=\"text-sm font-medium text-gray-800\">\n                    {forecastData.outlook}\n                  </p>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Key Insights */}\n      <div className=\"mt-6 grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <div className=\"bg-red-50 rounded-lg p-4\">\n          <h5 className=\"font-semibold text-red-800 mb-2\">Market Risks</h5>\n          <p className=\"text-sm text-red-600\">\n            High overvaluation and interest rate sensitivity across all regions\n            pose significant risks. Mississauga shows the highest risk profile\n            with concerning affordability metrics.\n          </p>\n        </div>\n\n        <div className=\"bg-yellow-50 rounded-lg p-4\">\n          <h5 className=\"font-semibold text-yellow-800 mb-2\">Growth Outlook</h5>\n          <p className=\"text-sm text-yellow-600\">\n            Price growth expected to moderate but remain elevated. Brampton\n            offers the best growth prospects, while Mississauga faces correction\n            pressure.\n          </p>\n        </div>\n\n        <div className=\"bg-blue-50 rounded-lg p-4\">\n          <h5 className=\"font-semibold text-blue-800 mb-2\">\n            Investment Strategy\n          </h5>\n          <p className=\"text-sm text-blue-600\">\n            Market health remains strong but sustainability concerns growing.\n            Diversification across regions and property types recommended to\n            mitigate concentration risk.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default React.memo(MarketHealthDashboard);\n","import React, { useEffect, useRef, useState, useMemo } from 'react';\nimport Map from '@arcgis/core/Map';\nimport MapView from '@arcgis/core/views/MapView';\nimport Graphic from '@arcgis/core/Graphic';\nimport GraphicsLayer from '@arcgis/core/layers/GraphicsLayer';\nimport SimpleMarkerSymbol from '@arcgis/core/symbols/SimpleMarkerSymbol';\nimport PopupTemplate from '@arcgis/core/PopupTemplate';\nimport '@arcgis/core/assets/esri/themes/light/main.css';\n\nfunction HousingMapDashboard() {\n  const mapRef = useRef();\n  const [mapView, setMapView] = useState(null);\n  const [selectedMetric, setSelectedMetric] = useState('avgPrice');\n  const [mapType, setMapType] = useState('markers'); // 'markers', 'heatmap'\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Extended housing data with geographic coordinates for Peel Region and surrounding areas\n  const housingGeoData = useMemo(\n    () => [\n      {\n        municipality: 'Mississauga',\n        geometry: [-79.6441, 43.589], // [longitude, latitude]\n        avgPrice: 1350000,\n        priceGrowth: 11.9,\n        affordabilityRate: 45.2,\n        riskScore: 85,\n        marketTemp: 82,\n        inventory: 1.8,\n      },\n      {\n        municipality: 'Brampton',\n        geometry: [-79.7624, 43.7315],\n        avgPrice: 1150000,\n        priceGrowth: 10.2,\n        affordabilityRate: 58.3,\n        riskScore: 74,\n        marketTemp: 74,\n        inventory: 2.3,\n      },\n      {\n        municipality: 'Caledon',\n        geometry: [-79.8711, 43.8554],\n        avgPrice: 1650000,\n        priceGrowth: 7.6,\n        affordabilityRate: 28.1,\n        riskScore: 68,\n        marketTemp: 68,\n        inventory: 3.2,\n      },\n      // Additional neighborhoods for better heatmap\n      {\n        municipality: 'Oakville',\n        geometry: [-79.6876, 43.4675],\n        avgPrice: 1750000,\n        priceGrowth: 9.8,\n        affordabilityRate: 32.1,\n        riskScore: 78,\n        marketTemp: 79,\n        inventory: 1.5,\n      },\n      {\n        municipality: 'Milton',\n        geometry: [-79.8774, 43.5183],\n        avgPrice: 1450000,\n        priceGrowth: 12.1,\n        affordabilityRate: 41.8,\n        riskScore: 76,\n        marketTemp: 81,\n        inventory: 2.1,\n      },\n    ],\n    []\n  );\n\n  useEffect(() => {\n    try {\n      // Create the map with fallback basemaps\n      const map = new Map({\n        basemap: 'osm', // OpenStreetMap - more reliable fallback\n      });\n\n      // Create the view\n      const view = new MapView({\n        container: mapRef.current,\n        map: map,\n        center: [-79.6441, 43.6426], // Centered on Peel Region\n        zoom: 10,\n        popup: {\n          dockEnabled: true,\n          dockOptions: {\n            position: 'top-right',\n            breakpoint: false,\n          },\n        },\n      });\n\n      // Create graphics layer for housing data\n      const housingLayer = new GraphicsLayer({\n        title: 'Housing Market Data',\n      });\n\n      // Function to get symbol based on selected metric\n      const getSymbol = data => {\n        let color, size;\n\n        switch (selectedMetric) {\n          case 'avgPrice':\n            // Color based on price: green (lower) to red (higher)\n            const priceRatio = data.avgPrice / 1650000; // Normalize to max price\n            color =\n              priceRatio > 0.8\n                ? [220, 38, 127] // High price - red\n                : priceRatio > 0.7\n                  ? [251, 146, 60] // Medium-high - orange\n                  : [34, 197, 94]; // Lower price - green\n            size = Math.max(20, data.avgPrice / 50000); // Size based on price\n            break;\n\n          case 'riskScore':\n            // Color based on risk: green (low) to red (high)\n            color =\n              data.riskScore > 80\n                ? [220, 38, 127] // High risk - red\n                : data.riskScore > 70\n                  ? [251, 146, 60] // Medium risk - orange\n                  : [34, 197, 94]; // Low risk - green\n            size = Math.max(15, data.riskScore / 3);\n            break;\n\n          case 'marketTemp':\n            // Color based on temperature\n            color =\n              data.marketTemp > 80\n                ? [220, 38, 127] // Very hot - red\n                : data.marketTemp > 70\n                  ? [251, 146, 60] // Hot - orange\n                  : [34, 197, 94]; // Warm/cool - green\n            size = Math.max(15, data.marketTemp / 3);\n            break;\n\n          default:\n            color = [59, 130, 246]; // Default blue\n            size = 25;\n        }\n\n        return new SimpleMarkerSymbol({\n          color: color,\n          size: size,\n          outline: {\n            color: [255, 255, 255],\n            width: 2,\n          },\n        });\n      };\n\n      // Function to create heatmap points\n      const createHeatmapLayer = () => {\n        housingLayer.removeAll();\n\n        // Create multiple points for better heatmap effect\n        housingGeoData.forEach(data => {\n          const intensity = getHeatmapIntensity(data);\n\n          // Create multiple points around the main point for density\n          for (let i = 0; i < intensity; i++) {\n            const offsetLat = (Math.random() - 0.5) * 0.02; // Small random offset\n            const offsetLng = (Math.random() - 0.5) * 0.02;\n\n            const point = {\n              type: 'point',\n              longitude: data.geometry[0] + offsetLng,\n              latitude: data.geometry[1] + offsetLat,\n            };\n\n            const symbol = new SimpleMarkerSymbol({\n              color: [255, 69, 0, 0.8], // Hot orange with transparency\n              size: 8,\n              outline: {\n                color: [255, 255, 255, 0],\n                width: 0,\n              },\n            });\n\n            const graphic = new Graphic({\n              geometry: point,\n              symbol: symbol,\n              attributes: data,\n            });\n\n            housingLayer.add(graphic);\n          }\n        });\n      };\n\n      // Function to get heatmap intensity\n      const getHeatmapIntensity = data => {\n        let value;\n\n        switch (selectedMetric) {\n          case 'avgPrice':\n            value = Math.round(data.avgPrice / 100000); // Scale down price\n            break;\n          case 'riskScore':\n            value = Math.round(data.riskScore / 10);\n            break;\n          case 'marketTemp':\n            value = Math.round(data.marketTemp / 10);\n            break;\n          case 'affordabilityRate':\n            value = Math.round(data.affordabilityRate / 10);\n            break;\n          default:\n            value = Math.round(data.avgPrice / 100000);\n        }\n\n        return Math.max(5, Math.min(25, value)); // Between 5 and 25 points\n      };\n\n      // Function to update graphics based on selected metric and map type\n      const updateMapGraphics = () => {\n        if (mapType === 'heatmap') {\n          createHeatmapLayer();\n        } else {\n          // Original markers\n          housingLayer.removeAll();\n\n          housingGeoData.forEach(data => {\n            const point = {\n              type: 'point',\n              longitude: data.geometry[0],\n              latitude: data.geometry[1],\n            };\n\n            const popupTemplate = new PopupTemplate({\n              title: '{municipality} Housing Market',\n              content: `\n              <div style=\"padding: 10px;\">\n                <table style=\"width: 100%; border-collapse: collapse;\">\n                  <tr><td><strong>Average Price:</strong></td><td>$${data.avgPrice.toLocaleString()}</td></tr>\n                  <tr><td><strong>Price Growth:</strong></td><td>${data.priceGrowth}%</td></tr>\n                  <tr><td><strong>Affordability Rate:</strong></td><td>${data.affordabilityRate}%</td></tr>\n                  <tr><td><strong>Risk Score:</strong></td><td>${data.riskScore}/100</td></tr>\n                  <tr><td><strong>Market Temperature:</strong></td><td>${data.marketTemp}/100</td></tr>\n                  <tr><td><strong>Inventory (months):</strong></td><td>${data.inventory}</td></tr>\n                </table>\n              </div>\n            `,\n              fieldInfos: [\n                {\n                  fieldName: 'municipality',\n                  visible: false,\n                },\n              ],\n            });\n\n            const graphic = new Graphic({\n              geometry: point,\n              symbol: getSymbol(data),\n              attributes: data,\n              popupTemplate: popupTemplate,\n            });\n\n            housingLayer.add(graphic);\n          });\n        }\n      };\n\n      // Add layer to map\n      map.add(housingLayer);\n\n      // Initial graphics update\n      updateMapGraphics();\n\n      // Store view reference\n      setMapView(view);\n      setIsLoading(false);\n\n      // Cleanup function\n      return () => {\n        if (view) {\n          view.destroy();\n        }\n      };\n    } catch (err) {\n      // Error loading ArcGIS modules (logged by parent component)\n      setIsLoading(false);\n    }\n  }, [selectedMetric, mapType, housingGeoData]);\n\n  // Update map when metric changes\n  useEffect(() => {\n    if (mapView) {\n      // Trigger map update - in real implementation, this would update the graphics\n      // For now, we'll reload the component to demonstrate the concept\n    }\n  }, [selectedMetric, mapView]);\n\n  const metrics = [\n    { id: 'avgPrice', label: 'Average Prices', icon: '💰' },\n    { id: 'riskScore', label: 'Risk Levels', icon: '⚠️' },\n    { id: 'marketTemp', label: 'Market Temperature', icon: '🌡️' },\n    { id: 'affordabilityRate', label: 'Affordability', icon: '🏠' },\n  ];\n\n  return (\n    <div>\n      <div className=\"space-y-6 mb-8\">\n        {/* Header Section */}\n        <div className=\"flex flex-col lg:flex-row justify-between items-start lg:items-center gap-6\">\n          <div>\n            <h3 className=\"text-lg font-bold text-gray-800 flex items-center mb-3\">\n              <span className=\"mr-3\">🗺️</span>\n              Geographic Housing Market Analysis\n            </h3>\n            <p className=\"text-sm text-gray-600\">\n              Interactive map visualization of housing market trends across Peel\n              Region\n            </p>\n          </div>\n        </div>\n\n        {/* Controls Section */}\n        <div className=\"flex flex-col lg:flex-row justify-between items-start lg:items-center gap-6\">\n          {/* Metric Selection */}\n          <div className=\"flex-1\">\n            <h4 className=\"text-sm font-semibold text-gray-700 mb-3\">\n              Select Metric\n            </h4>\n            <div className=\"flex flex-wrap gap-4\">\n              {metrics.map(metric => (\n                <button\n                  key={metric.id}\n                  onClick={() => setSelectedMetric(metric.id)}\n                  className={`\n                    px-5 py-3 text-sm font-medium rounded-lg transition-all duration-300 flex items-center space-x-3 shadow-sm min-w-[140px]\n                    ${\n                      selectedMetric === metric.id\n                        ? 'bg-blue-600 text-white shadow-md transform scale-105'\n                        : 'bg-white text-gray-700 hover:bg-gray-50 hover:shadow-md border border-gray-200'\n                    }\n                  `}\n                >\n                  <span className=\"text-lg\">{metric.icon}</span>\n                  <span>{metric.label}</span>\n                </button>\n              ))}\n            </div>\n          </div>\n\n          {/* Map Type Toggle */}\n          <div className=\"flex-shrink-0\">\n            <h4 className=\"text-sm font-semibold text-gray-700 mb-3\">\n              Visualization Type\n            </h4>\n            <div className=\"flex bg-gray-200 rounded-xl p-2 shadow-sm\">\n              <button\n                onClick={() => setMapType('markers')}\n                className={`\n                  px-6 py-3 text-sm font-medium rounded-lg transition-all duration-300 flex items-center space-x-3 min-w-[120px] justify-center\n                  ${\n                    mapType === 'markers'\n                      ? 'bg-blue-600 text-white shadow-md transform scale-105'\n                      : 'text-gray-700 hover:text-gray-900 hover:bg-gray-100'\n                  }\n                `}\n              >\n                <span className=\"text-lg\">📍</span>\n                <span>Markers</span>\n              </button>\n              <button\n                onClick={() => setMapType('heatmap')}\n                className={`\n                  px-6 py-3 text-sm font-medium rounded-lg transition-all duration-300 flex items-center space-x-3 min-w-[120px] justify-center\n                  ${\n                    mapType === 'heatmap'\n                      ? 'bg-orange-600 text-white shadow-md transform scale-105'\n                      : 'text-gray-700 hover:text-gray-900 hover:bg-gray-100'\n                  }\n                `}\n              >\n                <span className=\"text-lg\">🔥</span>\n                <span>Heatmap</span>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Map Container */}\n      <div className=\"relative\">\n        {isLoading && (\n          <div className=\"absolute inset-0 bg-gray-100 rounded-lg flex items-center justify-center z-10\">\n            <div className=\"text-center\">\n              <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n              <p className=\"text-gray-600\">Loading ArcGIS Map...</p>\n            </div>\n          </div>\n        )}\n\n        <div\n          ref={mapRef}\n          className=\"w-full h-96 rounded-lg border border-gray-200\"\n          style={{ minHeight: '400px' }}\n        />\n      </div>\n\n      {/* Legend */}\n      <div className=\"mt-4 grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <div className=\"bg-gray-50 rounded-lg p-4\">\n          <h4 className=\"font-semibold text-gray-800 mb-2\">Map Legend</h4>\n          <div className=\"space-y-2 text-sm\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-4 h-4 bg-green-500 rounded-full\"></div>\n              <span>\n                Low{' '}\n                {selectedMetric === 'avgPrice'\n                  ? 'Price'\n                  : selectedMetric === 'riskScore'\n                    ? 'Risk'\n                    : 'Temperature'}\n              </span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-4 h-4 bg-orange-500 rounded-full\"></div>\n              <span>\n                Medium{' '}\n                {selectedMetric === 'avgPrice'\n                  ? 'Price'\n                  : selectedMetric === 'riskScore'\n                    ? 'Risk'\n                    : 'Temperature'}\n              </span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-4 h-4 bg-red-500 rounded-full\"></div>\n              <span>\n                High{' '}\n                {selectedMetric === 'avgPrice'\n                  ? 'Price'\n                  : selectedMetric === 'riskScore'\n                    ? 'Risk'\n                    : 'Temperature'}\n              </span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-blue-50 rounded-lg p-4\">\n          <h4 className=\"font-semibold text-blue-800 mb-2\">\n            Geographic Insights\n          </h4>\n          <p className=\"text-sm text-blue-600\">\n            Click on any municipality marker to view detailed housing market\n            metrics and trends for that area.\n          </p>\n        </div>\n\n        <div className=\"bg-green-50 rounded-lg p-4\">\n          <h4 className=\"font-semibold text-green-800 mb-2\">\n            Data Visualization\n          </h4>\n          <p className=\"text-sm text-green-600\">\n            Marker size and color represent the intensity of the selected\n            metric. Larger, redder markers indicate higher values.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default React.memo(HousingMapDashboard);\n","import React from 'react';\nimport { getDataForRegionAndType } from '../data/housingData';\nimport designSystem from '../styles/designSystem';\n\nfunction KeyMetrics({ selectedRegion, selectedHousingType }) {\n  // Get hardcoded data for the selected region and housing type\n  const data = getDataForRegionAndType(\n    'keyMetrics',\n    selectedRegion,\n    selectedHousingType\n  );\n\n  const formatCurrency = value => {\n    return new Intl.NumberFormat('en-CA', {\n      style: 'currency',\n      currency: 'CAD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(value || 0);\n  };\n\n  const formatChange = value => {\n    const isPositive = value > 0;\n    return (\n      <span\n        className={`${designSystem.components.metric.change} flex items-center ${isPositive ? designSystem.typography.success : designSystem.typography.danger}`}\n      >\n        <span className=\"text-lg mr-1\">{isPositive ? '↑' : '↓'}</span>\n        {Math.abs(value)}%\n      </span>\n    );\n  };\n\n  const metricCards = [\n    {\n      title: 'Average Price',\n      value: formatCurrency(data?.avgPrice || 0),\n      change: data?.priceChange || 0,\n      icon: '💰',\n      bgGradient: designSystem.gradients.primary,\n      shadowColor: designSystem.shadows.card,\n      borderColor: designSystem.colors.primary[500],\n    },\n    {\n      title: 'Total Sales',\n      value: (data?.totalSales || 0).toLocaleString(),\n      change: data?.salesChange || 0,\n      icon: '📊',\n      bgGradient: designSystem.gradients.success,\n      shadowColor: designSystem.shadows.card,\n      borderColor: designSystem.colors.success[500],\n    },\n    {\n      title: 'Days on Market',\n      value: data?.avgDaysOnMarket || 0,\n      change: data?.daysChange || 0,\n      icon: '📅',\n      bgGradient: designSystem.gradients.warning,\n      shadowColor: designSystem.shadows.card,\n      borderColor: designSystem.colors.warning[500],\n    },\n    {\n      title: 'Active Inventory',\n      value: (data?.inventory || 0).toLocaleString(),\n      change: data?.inventoryChange || 0,\n      icon: '🏠',\n      bgGradient: designSystem.gradients.accent,\n      shadowColor: designSystem.shadows.card,\n      borderColor: designSystem.colors.accent[500],\n    },\n  ];\n\n  return (\n    <div>\n      {/* Header */}\n      <div className=\"mb-4\">\n        <h3 className={designSystem.typography.h3}>\n          Key Performance Indicators\n        </h3>\n        <p className={designSystem.typography.bodySmall}>\n          {selectedRegion} - {selectedHousingType}\n        </p>\n      </div>\n\n      <div\n        className={\n          designSystem.layout.gridResponsive4 +\n          ' ' +\n          designSystem.spacing.gridGap\n        }\n        role=\"region\"\n        aria-label=\"Key performance metrics\"\n      >\n        {metricCards.map((metric, index) => (\n          <div\n            key={index}\n            className={`\n            ${designSystem.animations.transition} ${designSystem.animations.hoverScale} hover:-translate-y-2\n            animate-slide-up\n          `}\n            style={{ animationDelay: `${index * 100}ms` }}\n            role=\"article\"\n            aria-labelledby={`metric-${index}-title`}\n          >\n            <div\n              className={`\n            bg-gradient-to-br ${metric.bgGradient} ${designSystem.borders.radius.medium} ${designSystem.spacing.container} text-white\n            ${metric.shadowColor} hover:shadow-2xl ${designSystem.animations.transition}\n            relative overflow-hidden group\n          `}\n            >\n              {/* Animated background effect */}\n              <div className=\"absolute inset-0 bg-white opacity-0 group-hover:opacity-10 transition-opacity duration-300\"></div>\n\n              {/* Content */}\n              <div className=\"relative z-10\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3\n                    id={`metric-${index}-title`}\n                    className=\"text-white/90 font-medium text-sm uppercase tracking-wider\"\n                  >\n                    {metric.title}\n                  </h3>\n                  <span className=\"text-3xl animate-pulse\" aria-hidden=\"true\">\n                    {metric.icon}\n                  </span>\n                </div>\n                <div className=\"space-y-2\">\n                  <p className=\"text-3xl font-bold\">{metric.value}</p>\n                  <div className=\"flex items-center justify-between\">\n                    {formatChange(metric.change)}\n                    <span className=\"text-xs text-white/70\">vs last month</span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Decorative element */}\n              <div className=\"absolute -bottom-2 -right-2 w-24 h-24 bg-white/10 rounded-full blur-xl\"></div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default React.memo(KeyMetrics);\n","import React, { useState } from 'react';\nimport { getEnhancedMarketData } from '../data/housingData';\n\nfunction EnhancedMetrics({ selectedRegion, selectedHousingType }) {\n  const { enhancedMetrics } = getEnhancedMarketData(\n    selectedRegion,\n    selectedHousingType\n  );\n  const [activeTab, setActiveTab] = useState('price');\n\n  const metricGroups = {\n    price: [\n      {\n        title: 'Average Price',\n        value: enhancedMetrics.averagePrice,\n        change: enhancedMetrics.priceChange,\n        isPositive: enhancedMetrics.priceChange > 0,\n        icon: '💰',\n        bgGradient: 'from-blue-400 to-blue-600',\n      },\n      {\n        title: 'Median Price',\n        value: enhancedMetrics.medianPrice,\n        change: enhancedMetrics.medianPriceChange,\n        isPositive: enhancedMetrics.medianPriceChange > 0,\n        icon: '📊',\n        bgGradient: 'from-indigo-400 to-indigo-600',\n      },\n      {\n        title: 'Price Per Sq Ft',\n        value: enhancedMetrics.pricePerSqFt,\n        change: enhancedMetrics.pricePerSqFtChange,\n        isPositive: enhancedMetrics.pricePerSqFtChange > 0,\n        icon: '📐',\n        bgGradient: 'from-purple-400 to-purple-600',\n      },\n      {\n        title: 'List-to-Sale Ratio',\n        value: enhancedMetrics.listToSaleRatio + '%',\n        change: enhancedMetrics.listToSaleChange,\n        isPositive: enhancedMetrics.listToSaleChange > 0,\n        icon: '🎯',\n        bgGradient: 'from-pink-400 to-pink-600',\n      },\n    ],\n    activity: [\n      {\n        title: 'Total Sales',\n        value: enhancedMetrics.totalSales.toLocaleString(),\n        change: enhancedMetrics.salesChange,\n        isPositive: enhancedMetrics.salesChange > 0,\n        icon: '🛒',\n        bgGradient: 'from-green-400 to-green-600',\n      },\n      {\n        title: 'Days on Market',\n        value: enhancedMetrics.daysOnMarket,\n        change: enhancedMetrics.daysOnMarketChange,\n        isPositive: enhancedMetrics.daysOnMarketChange < 0,\n        icon: '⏱️',\n        bgGradient: 'from-yellow-400 to-yellow-600',\n      },\n      {\n        title: 'New Listings',\n        value: enhancedMetrics.newListings.toLocaleString(),\n        change: enhancedMetrics.newListingsChange,\n        isPositive: enhancedMetrics.newListingsChange > 0,\n        icon: '🏡',\n        bgGradient: 'from-orange-400 to-orange-600',\n      },\n      {\n        title: 'Absorption Rate',\n        value: enhancedMetrics.absorptionRate + '%',\n        change: enhancedMetrics.absorptionRateChange,\n        isPositive: enhancedMetrics.absorptionRateChange > 0,\n        icon: '📈',\n        bgGradient: 'from-red-400 to-red-600',\n      },\n    ],\n    market: [\n      {\n        title: 'Months of Inventory',\n        value: enhancedMetrics.monthsOfInventory,\n        change: enhancedMetrics.inventoryChange,\n        isPositive: enhancedMetrics.inventoryChange < 0,\n        icon: '📦',\n        bgGradient: 'from-teal-400 to-teal-600',\n      },\n      {\n        title: 'Price-to-Income',\n        value: enhancedMetrics.priceToIncome + 'x',\n        change: enhancedMetrics.priceToIncomeChange,\n        isPositive: enhancedMetrics.priceToIncomeChange < 0,\n        icon: '💳',\n        bgGradient: 'from-cyan-400 to-cyan-600',\n      },\n      {\n        title: 'Seller Market Index',\n        value: enhancedMetrics.sellerMarketIndex + '/100',\n        change: null,\n        isPositive: null,\n        icon: '🏪',\n        bgGradient:\n          enhancedMetrics.sellerMarketIndex > 75\n            ? 'from-red-400 to-red-600'\n            : enhancedMetrics.sellerMarketIndex > 50\n              ? 'from-orange-400 to-orange-600'\n              : 'from-green-400 to-green-600',\n        description:\n          enhancedMetrics.sellerMarketIndex > 75\n            ? \"Strong Seller's Market\"\n            : enhancedMetrics.sellerMarketIndex > 50\n              ? \"Moderate Seller's Market\"\n              : \"Buyer's Market\",\n      },\n      {\n        title: 'Affordability Index',\n        value: enhancedMetrics.affordabilityIndex + '/100',\n        change: null,\n        isPositive: null,\n        icon: '🏠',\n        bgGradient:\n          enhancedMetrics.affordabilityIndex > 75\n            ? 'from-green-400 to-green-600'\n            : enhancedMetrics.affordabilityIndex > 50\n              ? 'from-orange-400 to-orange-600'\n              : 'from-red-400 to-red-600',\n        description:\n          enhancedMetrics.affordabilityIndex > 75\n            ? 'High Affordability'\n            : enhancedMetrics.affordabilityIndex > 50\n              ? 'Moderate Affordability'\n              : 'Low Affordability',\n      },\n    ],\n  };\n\n  return (\n    <div>\n      {/* Header */}\n      <div className=\"mb-4\">\n        <h3 className=\"text-xl font-semibold text-gray-800 mb-6\">\n          Enhanced Market Metrics\n        </h3>\n\n        {/* Animated Tabs */}\n        <div className=\"flex flex-wrap border-b-2 border-gray-200 mb-6\">\n          {[\n            { id: 'price', label: 'Price Metrics', icon: '💰' },\n            { id: 'activity', label: 'Activity Metrics', icon: '📊' },\n            { id: 'market', label: 'Market Conditions', icon: '🏪' },\n          ].map(tab => (\n            <button\n              key={tab.id}\n              className={`\n                flex items-center space-x-2 py-3 px-6 font-medium transition-all duration-300\n                ${\n                  activeTab === tab.id\n                    ? 'text-blue-600 border-b-2 border-blue-600 bg-blue-50'\n                    : 'text-gray-500 hover:text-gray-700 hover:bg-gray-50'\n                }\n              `}\n              onClick={() => setActiveTab(tab.id)}\n            >\n              <span className=\"text-xl\">{tab.icon}</span>\n              <span>{tab.label}</span>\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Metrics Grid with Animations */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        {metricGroups[activeTab].map((metric, index) => (\n          <div\n            key={metric.title}\n            className={`\n              transform transition-all duration-500 hover:scale-105\n              ${activeTab ? 'translate-y-0 opacity-100' : 'translate-y-4 opacity-0'}\n            `}\n            style={{ transitionDelay: `${index * 100}ms` }}\n          >\n            <div\n              className={`\n              bg-gradient-to-br ${metric.bgGradient} rounded-xl p-6 text-white\n              shadow-lg hover:shadow-2xl transition-shadow duration-300\n            `}\n            >\n              <div className=\"flex items-center justify-between mb-3\">\n                <h4 className=\"text-sm font-medium text-white/90\">\n                  {metric.title}\n                </h4>\n                <span className=\"text-2xl animate-pulse\">{metric.icon}</span>\n              </div>\n\n              <p className=\"text-2xl font-bold mb-2\">{metric.value}</p>\n\n              {metric.change !== null ? (\n                <div\n                  className={`flex items-center space-x-1 text-sm ${\n                    metric.isPositive ? 'text-green-200' : 'text-red-200'\n                  }`}\n                >\n                  <span className=\"font-medium\">\n                    {metric.change > 0 ? '+' : ''}\n                    {metric.change}%\n                  </span>\n                  <span className=\"text-lg\">\n                    {metric.isPositive ? '↑' : '↓'}\n                  </span>\n                </div>\n              ) : metric.description ? (\n                <div className=\"text-sm text-white/90 font-medium\">\n                  {metric.description}\n                </div>\n              ) : null}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default EnhancedMetrics;\n","import React, { useState } from 'react';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  ReferenceLine,\n  Cell,\n} from 'recharts';\nimport { getRegionalComparisonData } from '../data/housingData';\n\nfunction RegionalComparison({ selectedHousingType }) {\n  const [selectedMetric, setSelectedMetric] = useState('averagePrice');\n\n  const metrics = [\n    { id: 'averagePrice', name: 'Average Price', icon: '💰', color: '#3B82F6' },\n    {\n      id: 'pricePerSqFt',\n      name: 'Price per Sq Ft',\n      icon: '📐',\n      color: '#8B5CF6',\n    },\n    {\n      id: 'daysOnMarket',\n      name: 'Days on Market',\n      icon: '📅',\n      color: '#F59E0B',\n    },\n    {\n      id: 'absorptionRate',\n      name: 'Absorption Rate',\n      icon: '📊',\n      color: '#10B981',\n    },\n  ];\n\n  const data = getRegionalComparisonData(selectedMetric, selectedHousingType);\n  const currentMetric = metrics.find(m => m.id === selectedMetric);\n  const isHigherBetter = selectedMetric !== 'daysOnMarket';\n\n  // Format values for display\n  const formatValue = value => {\n    switch (selectedMetric) {\n      case 'averagePrice':\n        return `$${(value / 1000000).toFixed(2)}M`;\n      case 'pricePerSqFt':\n        return `$${value}`;\n      case 'daysOnMarket':\n        return `${value} days`;\n      case 'absorptionRate':\n        return `${value}%`;\n      default:\n        return value;\n    }\n  };\n\n  // Custom tooltip with enhanced styling\n  const CustomTooltip = ({ active, payload, label }) => {\n    if (active && payload && payload.length) {\n      const regionValue = payload[0].value;\n      const ontarioAvg = data.find(d => d.name === label)?.ontarioAverage || 0;\n      const difference = regionValue - ontarioAvg;\n      const percentDiff = ((difference / ontarioAvg) * 100).toFixed(1);\n\n      return (\n        <div className=\"bg-white p-4 rounded-lg shadow-xl border border-gray-200\">\n          <p className=\"font-bold text-gray-800 mb-2\">{label}</p>\n          <div className=\"space-y-1\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-gray-600\">Region Value:</span>\n              <span className=\"font-medium\">{formatValue(regionValue)}</span>\n            </div>\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-gray-600\">Ontario Avg:</span>\n              <span className=\"font-medium\">{formatValue(ontarioAvg)}</span>\n            </div>\n            <div\n              className={`flex justify-between items-center pt-2 border-t ${\n                (difference > 0 && isHigherBetter) ||\n                (difference < 0 && !isHigherBetter)\n                  ? 'text-green-600'\n                  : 'text-red-600'\n              }`}\n            >\n              <span className=\"text-sm font-medium\">Difference:</span>\n              <span className=\"font-bold\">\n                {difference > 0 ? '+' : ''}\n                {percentDiff}%\n              </span>\n            </div>\n          </div>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  // Get bar colors based on performance\n  const getBarColor = (value, ontarioAvg) => {\n    const difference = value - ontarioAvg;\n    if (\n      (difference > 0 && isHigherBetter) ||\n      (difference < 0 && !isHigherBetter)\n    ) {\n      return '#10B981'; // Green for better performance\n    }\n    return '#EF4444'; // Red for worse performance\n  };\n\n  return (\n    <div>\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 space-y-4 sm:space-y-0\">\n        <div>\n          <h3 className=\"text-xl font-bold text-gray-800\">\n            Regional Comparison\n          </h3>\n          <p className=\"text-sm text-gray-600 mt-1\">\n            Compare {selectedHousingType} across regions\n          </p>\n        </div>\n        <div className=\"flex flex-wrap gap-2\">\n          {metrics.map(metric => (\n            <button\n              key={metric.id}\n              className={`\n                flex items-center space-x-2 px-4 py-2 text-sm font-medium rounded-lg\n                transition-all duration-300 transform hover:scale-105\n                ${\n                  selectedMetric === metric.id\n                    ? 'bg-gradient-to-r from-blue-500 to-blue-600 text-white shadow-md'\n                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                }\n              `}\n              onClick={() => setSelectedMetric(metric.id)}\n            >\n              <span className=\"text-lg\">{metric.icon}</span>\n              <span className=\"hidden sm:inline\">{metric.name}</span>\n            </button>\n          ))}\n        </div>\n      </div>\n\n      <ResponsiveContainer width=\"100%\" height={400}>\n        <BarChart\n          data={data}\n          margin={{ top: 20, right: 30, left: 40, bottom: 60 }}\n          layout=\"vertical\"\n        >\n          <defs>\n            <linearGradient id=\"colorGradient\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"0\">\n              <stop\n                offset=\"5%\"\n                stopColor={currentMetric.color}\n                stopOpacity={0.8}\n              />\n              <stop\n                offset=\"95%\"\n                stopColor={currentMetric.color}\n                stopOpacity={0.6}\n              />\n            </linearGradient>\n          </defs>\n\n          <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n          <XAxis\n            type=\"number\"\n            tickFormatter={formatValue}\n            tick={{ fontSize: 12 }}\n            tickLine={false}\n            axisLine={{ stroke: '#e5e7eb' }}\n          />\n          <YAxis\n            type=\"category\"\n            dataKey=\"name\"\n            width={100}\n            tick={{ fontSize: 12 }}\n            tickLine={false}\n            axisLine={{ stroke: '#e5e7eb' }}\n          />\n          <Tooltip\n            content={<CustomTooltip />}\n            cursor={{ fill: 'rgba(59, 130, 246, 0.1)' }}\n          />\n\n          <Bar dataKey=\"value\" name=\"Regional Values\" radius={[0, 8, 8, 0]}>\n            {data.map((entry, index) => (\n              <Cell\n                key={`cell-${index}`}\n                fill={getBarColor(entry.value, entry.ontarioAverage)}\n              />\n            ))}\n          </Bar>\n\n          <Bar\n            dataKey=\"ontarioAverage\"\n            name=\"Ontario Average\"\n            fill=\"#9CA3AF\"\n            opacity={0.7}\n            radius={[0, 8, 8, 0]}\n          />\n\n          <ReferenceLine\n            x={data.length > 0 ? data[0].ontarioAverage : 0}\n            stroke=\"#9CA3AF\"\n            strokeDasharray=\"5 5\"\n            strokeWidth={2}\n            label={{\n              value: 'Ontario Avg',\n              position: 'topRight',\n              fill: '#9CA3AF',\n              fontSize: 12,\n              fontWeight: 'bold',\n            }}\n          />\n        </BarChart>\n      </ResponsiveContainer>\n\n      {/* Color Legend */}\n      <div className=\"mt-4 mb-6 flex justify-center\">\n        <div className=\"flex items-center space-x-6 text-sm\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-4 h-3 bg-green-500 rounded\"></div>\n            <span className=\"text-gray-700\">\n              {isHigherBetter\n                ? 'Above Ontario Average'\n                : 'Below Ontario Average'}{' '}\n              (Better)\n            </span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-4 h-3 bg-red-500 rounded\"></div>\n            <span className=\"text-gray-700\">\n              {isHigherBetter\n                ? 'Below Ontario Average'\n                : 'Above Ontario Average'}{' '}\n              (Worse)\n            </span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-4 h-3 bg-gray-400 rounded\"></div>\n            <span className=\"text-gray-700\">Ontario Average</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Performance Summary */}\n      <div className=\"mt-6 p-4 bg-gray-50 rounded-lg\">\n        <h4 className=\"text-sm font-semibold text-gray-700 mb-2\">\n          Performance Summary\n        </h4>\n        <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-4\">\n          {data.map(region => {\n            const diff = (\n              ((region.value - region.ontarioAverage) / region.ontarioAverage) *\n              100\n            ).toFixed(1);\n            const isPositive =\n              (diff > 0 && isHigherBetter) || (diff < 0 && !isHigherBetter);\n\n            return (\n              <div key={region.name} className=\"text-center\">\n                <p className=\"text-xs text-gray-600\">{region.name}</p>\n                <p\n                  className={`text-lg font-bold ${isPositive ? 'text-green-600' : 'text-red-600'}`}\n                >\n                  {diff > 0 ? '+' : ''}\n                  {diff}%\n                </p>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default RegionalComparison;\n","// Master Export Utility - Export All Dashboard Data to CSV\nimport { exportToCSV } from './csvExport';\nimport { getDataForRegionAndType } from '../data/housingData';\nimport {\n  priceToIncomeRatios,\n  marketTemperature,\n  riskIndicators,\n  marketHealthTrends,\n  marketForecasts,\n  keyPerformanceIndicators,\n} from '../data/marketHealth';\n\nexport const exportAllDashboardData = (\n  selectedRegion,\n  selectedHousingType,\n  housingGeoData,\n  marketHealthData\n) => {\n  try {\n    // Get current timestamp for filename\n    const timestamp = new Date().toISOString().split('T')[0];\n    const filename = `housing_dashboard_complete_${selectedRegion.replace(/\\s+/g, '_')}_${selectedHousingType.replace(/\\s+/g, '_')}_${timestamp}`;\n\n    // Combine all data into comprehensive export\n    const allData = [];\n\n    // Add header information\n    allData.push({\n      Section: 'EXPORT SUMMARY',\n      Region: selectedRegion,\n      'Housing Type': selectedHousingType,\n      'Export Date': new Date().toLocaleString(),\n      'Total Records': 'See below sections',\n      'Data Source': 'Housing Market Dashboard',\n      'Generated By': 'Claude Code Assistant',\n    });\n\n    // Add separator\n    allData.push({});\n\n    // 1. KEY METRICS SECTION\n    allData.push({\n      Section: '=== KEY PERFORMANCE INDICATORS ===',\n      Region: selectedRegion,\n      'Housing Type': selectedHousingType,\n    });\n\n    // Get real key metrics data\n    const keyMetrics = getDataForRegionAndType(\n      'keyMetrics',\n      selectedRegion,\n      selectedHousingType\n    ) || {\n      avgPrice: 1245000,\n      priceChange: 5.2,\n      totalSales: 1400,\n      salesChange: 3.7,\n      avgDaysOnMarket: 18,\n      daysChange: -2.5,\n      inventory: 3500,\n      inventoryChange: -8.3,\n    };\n\n    allData.push({\n      Metric: 'Average Price',\n      Value: keyMetrics.avgPrice,\n      'Change (%)': keyMetrics.priceChange,\n      Unit: 'CAD',\n      Period: 'Current Month',\n    });\n\n    allData.push({\n      Metric: 'Total Sales',\n      Value: keyMetrics.totalSales,\n      'Change (%)': keyMetrics.salesChange,\n      Unit: 'Properties',\n      Period: 'Current Month',\n    });\n\n    allData.push({\n      Metric: 'Average Days on Market',\n      Value: keyMetrics.avgDaysOnMarket,\n      'Change (%)': keyMetrics.daysChange,\n      Unit: 'Days',\n      Period: 'Current Month',\n    });\n\n    allData.push({\n      Metric: 'Active Inventory',\n      Value: keyMetrics.inventory,\n      'Change (%)': keyMetrics.inventoryChange,\n      Unit: 'Properties',\n      Period: 'Current Month',\n    });\n\n    // Add separator\n    allData.push({});\n\n    // 2. GEOGRAPHIC DATA SECTION\n    allData.push({\n      Section: '=== GEOGRAPHIC MARKET DATA ===',\n      Description: 'Municipal-level housing market data',\n    });\n\n    housingGeoData.forEach(location => {\n      allData.push({\n        Municipality: location.municipality,\n        Longitude: location.geometry[0],\n        Latitude: location.geometry[1],\n        'Average Price ($)': location.avgPrice,\n        'Price Growth (%)': location.priceGrowth,\n        'Affordability Rate (%)': location.affordabilityRate,\n        'Risk Score': location.riskScore,\n        'Market Temperature': location.marketTemp,\n        'Inventory (months)': location.inventory,\n      });\n    });\n\n    // Add separator\n    allData.push({});\n\n    // 3. MARKET HEALTH DATA SECTION\n    allData.push({\n      Section: '=== MARKET HEALTH INDICATORS ===',\n      Description: 'Comprehensive market analysis and forecasts',\n    });\n\n    // Get real market health data\n    const regions = Object.keys(keyPerformanceIndicators.regional);\n    regions.forEach(region => {\n      const regionData = keyPerformanceIndicators.regional[region];\n      const tempData = marketTemperature[region];\n      const riskData = riskIndicators[region];\n      const forecastData = marketForecasts[region];\n      const priceIncomeData = priceToIncomeRatios[region];\n\n      allData.push({\n        Region: region,\n        'Health Score': regionData.health,\n        'Risk Score': regionData.risk,\n        'Opportunity Score': regionData.opportunity,\n        'Market Temperature': tempData.overall,\n        'Market Status': tempData.status,\n        'Price Growth (%)': tempData.priceGrowth,\n        'Sales Volume Score': tempData.salesVolume,\n        'Inventory Score': tempData.inventory,\n        'Time on Market Score': tempData.timeOnMarket,\n        'Risk Score Details': riskData.riskScore,\n        'Overvaluation Risk': riskData.overvaluation,\n        'Interest Rate Sensitivity': riskData.interestRateSensitivity,\n        'Price to Income Ratio': priceIncomeData.ratio,\n        'Affordability Index': priceIncomeData.affordabilityIndex,\n        'Forecast Growth 12M (%)': forecastData.priceGrowthNext12Months,\n        'Forecast Confidence': forecastData.confidence,\n        'Market Outlook': forecastData.outlook,\n      });\n    });\n\n    // Add separator\n    allData.push({});\n\n    // 4. HOUSING TYPE ANALYSIS\n    allData.push({\n      Section: '=== HOUSING TYPE DISTRIBUTION ===',\n      Description: 'Market share and pricing by property type',\n    });\n\n    const housingTypes = [\n      { type: 'Detached', share: 45.2, avgPrice: 1650000 },\n      { type: 'Semi-Detached', share: 22.1, avgPrice: 1250000 },\n      { type: 'Townhouse', share: 18.7, avgPrice: 950000 },\n      { type: 'Condo', share: 12.8, avgPrice: 650000 },\n      { type: 'Other', share: 1.2, avgPrice: 850000 },\n    ];\n\n    housingTypes.forEach(type => {\n      allData.push({\n        'Housing Type': type.type,\n        'Market Share (%)': type.share,\n        'Average Price ($)': type.avgPrice,\n        Region: selectedRegion,\n      });\n    });\n\n    // Add separator\n    allData.push({});\n\n    // 5. MARKET TRENDS DATA\n    allData.push({\n      Section: '=== MARKET TRENDS (12 MONTHS) ===',\n      Description: 'Historical price and sales trends',\n    });\n\n    // Get real price chart data\n    const priceData = getDataForRegionAndType(\n      'priceChart',\n      selectedRegion,\n      selectedHousingType\n    );\n    if (priceData && priceData.length > 0) {\n      priceData.forEach(dataPoint => {\n        allData.push({\n          Month: dataPoint.month,\n          'Average Price ($)': dataPoint.price,\n          Region: selectedRegion,\n          'Housing Type': selectedHousingType,\n        });\n      });\n    }\n\n    // Add separator\n    allData.push({});\n\n    // 6. SALES VOLUME DATA\n    allData.push({\n      Section: '=== SALES VOLUME TRENDS ===',\n      Description: 'Monthly sales volume data',\n    });\n\n    const salesData = getDataForRegionAndType(\n      'salesChart',\n      selectedRegion,\n      selectedHousingType\n    );\n    if (salesData && salesData.length > 0) {\n      salesData.forEach(dataPoint => {\n        allData.push({\n          Month: dataPoint.month,\n          'Sales Volume': dataPoint.sales,\n          Region: selectedRegion,\n          'Housing Type': selectedHousingType,\n        });\n      });\n    }\n\n    // Add separator\n    allData.push({});\n\n    // 7. MARKET HEALTH TRENDS\n    allData.push({\n      Section: '=== MARKET HEALTH TRENDS ===',\n      Description: 'Historical health score trends',\n    });\n\n    const healthTrends = marketHealthTrends[selectedRegion];\n    if (healthTrends && healthTrends.length > 0) {\n      healthTrends.forEach(dataPoint => {\n        allData.push({\n          Month: dataPoint.month,\n          'Health Score': dataPoint.healthScore,\n          'Price Growth (%)': dataPoint.priceGrowth,\n          'Sales Activity': dataPoint.salesActivity,\n          'Market Confidence': dataPoint.marketConfidence,\n          Region: selectedRegion,\n        });\n      });\n    }\n\n    // Export the comprehensive data\n    exportToCSV(allData, filename);\n\n    // Show success message\n    // Export completed successfully\n    return true;\n  } catch (error) {\n    // Export error (logged by calling function)\n    return false;\n  }\n};\n","// CSV Export Utility Functions\n\nexport const exportToCSV = (data, filename) => {\n  if (!data || data.length === 0) {\n    // No data to export\n    return;\n  }\n\n  // Get headers from the first object\n  const headers = Object.keys(data[0]);\n\n  // Create CSV content\n  const csvContent = [\n    // Header row\n    headers.join(','),\n    // Data rows\n    ...data.map(row =>\n      headers\n        .map(header => {\n          let value = row[header];\n          // Handle values that might contain commas, quotes, or newlines\n          if (\n            typeof value === 'string' &&\n            (value.includes(',') || value.includes('\"') || value.includes('\\n'))\n          ) {\n            value = `\"${value.replace(/\"/g, '\"\"')}\"`;\n          }\n          return value;\n        })\n        .join(',')\n    ),\n  ].join('\\n');\n\n  // Create and download the file\n  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n  const link = document.createElement('a');\n\n  if (link.download !== undefined) {\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', `${filename}.csv`);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }\n};\n\nexport const exportChartDataToCSV = (chartData, filename, metric = '') => {\n  if (!chartData || chartData.length === 0) {\n    // No chart data to export\n    return;\n  }\n\n  // Add metadata header if metric is provided\n  let csvContent = '';\n  if (metric) {\n    csvContent += `# Housing Market Data Export - ${metric}\\n`;\n    csvContent += `# Generated on: ${new Date().toLocaleString()}\\n`;\n    csvContent += `# Total Records: ${chartData.length}\\n\\n`;\n  }\n\n  // Get headers from the first object\n  const headers = Object.keys(chartData[0]);\n\n  // Create CSV content\n  csvContent += [\n    // Header row\n    headers.join(','),\n    // Data rows\n    ...chartData.map(row =>\n      headers\n        .map(header => {\n          let value = row[header];\n          // Handle values that might contain commas, quotes, or newlines\n          if (\n            typeof value === 'string' &&\n            (value.includes(',') || value.includes('\"') || value.includes('\\n'))\n          ) {\n            value = `\"${value.replace(/\"/g, '\"\"')}\"`;\n          }\n          return value;\n        })\n        .join(',')\n    ),\n  ].join('\\n');\n\n  // Create and download the file\n  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n  const link = document.createElement('a');\n\n  if (link.download !== undefined) {\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute(\n      'download',\n      `${filename}_${new Date().toISOString().split('T')[0]}.csv`\n    );\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }\n};\n\nexport const exportMarketHealthToCSV = (data, filename) => {\n  const formattedData = data.map(item => ({\n    Region: item.region || item.municipality || 'N/A',\n    'Health Score': item.health || item.healthScore || 'N/A',\n    'Risk Score': item.risk || item.riskScore || 'N/A',\n    'Market Temperature': item.marketTemp || item.temperature || 'N/A',\n    'Average Price ($)': item.avgPrice || 'N/A',\n    'Price Growth (%)': item.priceGrowth || 'N/A',\n    'Affordability Rate (%)': item.affordabilityRate || 'N/A',\n    'Inventory (months)': item.inventory || 'N/A',\n  }));\n\n  exportChartDataToCSV(formattedData, filename, 'Market Health Analysis');\n};\n\nexport const exportHousingMapDataToCSV = (housingGeoData, selectedMetric) => {\n  const formattedData = housingGeoData.map(item => ({\n    Municipality: item.municipality,\n    Longitude: item.geometry[0],\n    Latitude: item.geometry[1],\n    'Average Price ($)': item.avgPrice,\n    'Price Growth (%)': item.priceGrowth,\n    'Affordability Rate (%)': item.affordabilityRate,\n    'Risk Score': item.riskScore,\n    'Market Temperature': item.marketTemp,\n    'Inventory (months)': item.inventory,\n  }));\n\n  exportChartDataToCSV(\n    formattedData,\n    'housing_geographic_data',\n    `Geographic Analysis - ${selectedMetric}`\n  );\n};\n","import React from 'react';\nimport PriceChart from './charts/PriceChart';\nimport SalesChart from './charts/SalesChart';\nimport MarketTrendsChart from './charts/MarketTrendsChart';\nimport HousingTypeDistributionChart from './charts/HousingTypeDistributionChart';\nimport PricePerSqFtChart from './charts/PricePerSqFtChart';\nimport MarketVelocityChart from './charts/MarketVelocityChart';\nimport NewVsResaleChart from './charts/NewVsResaleChart';\nimport MarketHealthDashboard from './charts/MarketHealthDashboard';\nimport HousingMapDashboard from './charts/HousingMapDashboard';\nimport KeyMetrics from './KeyMetrics';\nimport EnhancedMetrics from './EnhancedMetrics';\nimport RegionalComparison from './RegionalComparison';\nimport { getDataForRegionAndType } from '../data/housingData';\nimport { exportAllDashboardData } from '../utils/masterExport';\n\nfunction Dashboard({ selectedRegion, selectedHousingType }) {\n  const handleMasterExport = () => {\n    // Get comprehensive housing geo data for export\n    const housingGeoData = [\n      {\n        municipality: 'Mississauga',\n        geometry: [-79.6441, 43.589],\n        avgPrice: 1350000,\n        priceGrowth: 11.9,\n        affordabilityRate: 45.2,\n        riskScore: 85,\n        marketTemp: 82,\n        inventory: 1.8,\n      },\n      {\n        municipality: 'Brampton',\n        geometry: [-79.7624, 43.7315],\n        avgPrice: 1150000,\n        priceGrowth: 10.2,\n        affordabilityRate: 58.3,\n        riskScore: 74,\n        marketTemp: 74,\n        inventory: 2.3,\n      },\n      {\n        municipality: 'Caledon',\n        geometry: [-79.8711, 43.8554],\n        avgPrice: 1650000,\n        priceGrowth: 7.6,\n        affordabilityRate: 28.1,\n        riskScore: 68,\n        marketTemp: 68,\n        inventory: 3.2,\n      },\n      {\n        municipality: 'Oakville',\n        geometry: [-79.6876, 43.4675],\n        avgPrice: 1750000,\n        priceGrowth: 9.8,\n        affordabilityRate: 32.1,\n        riskScore: 78,\n        marketTemp: 79,\n        inventory: 1.5,\n      },\n      {\n        municipality: 'Milton',\n        geometry: [-79.8774, 43.5183],\n        avgPrice: 1450000,\n        priceGrowth: 12.1,\n        affordabilityRate: 41.8,\n        riskScore: 76,\n        marketTemp: 81,\n        inventory: 2.1,\n      },\n    ];\n\n    // Call the enhanced export function\n    exportAllDashboardData(\n      selectedRegion,\n      selectedHousingType,\n      housingGeoData,\n      null\n    );\n  };\n\n  return (\n    <main className=\"flex-1 p-6 bg-gradient-to-br from-gray-50 to-gray-100 overflow-y-auto overflow-x-hidden\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Animated Header Section */}\n        <div className=\"mb-8 animate-fade-in\">\n          <div className=\"flex flex-col lg:flex-row justify-between items-start lg:items-center gap-4\">\n            <div>\n              <h2 className=\"text-4xl font-bold text-gray-800 mb-2 bg-clip-text text-transparent bg-gradient-to-r from-blue-600 to-purple-600\">\n                {selectedRegion} - {selectedHousingType}\n              </h2>\n              <p className=\"text-gray-600 text-lg\">\n                Real-time housing market analytics and trends for February 2025\n              </p>\n            </div>\n\n            {/* Master Export Button */}\n            <div className=\"flex-shrink-0\">\n              <button\n                onClick={handleMasterExport}\n                className=\"px-6 py-3 bg-gradient-to-r from-green-600 to-green-700 text-white text-sm font-semibold rounded-xl hover:from-green-700 hover:to-green-800 transition-all duration-300 flex items-center space-x-3 shadow-lg hover:shadow-xl transform hover:scale-105\"\n              >\n                <span className=\"text-lg\">📊</span>\n                <span>Export All Data</span>\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {/* Key Metrics with staggered animation */}\n        <div\n          className=\"mb-8 animate-slide-up\"\n          style={{ animationDelay: '100ms' }}\n        >\n          <div className=\"bg-white rounded-xl shadow-lg p-6 transform transition-all duration-300 hover:shadow-xl hover:-translate-y-1\">\n            <KeyMetrics\n              selectedRegion={selectedRegion}\n              selectedHousingType={selectedHousingType}\n            />\n          </div>\n        </div>\n\n        {/* Enhanced Metrics with tabs */}\n        <div\n          className=\"mb-8 animate-slide-up\"\n          style={{ animationDelay: '200ms' }}\n        >\n          <div className=\"bg-white rounded-xl shadow-lg p-6 transform transition-all duration-300 hover:shadow-xl hover:-translate-y-1\">\n            <EnhancedMetrics\n              selectedRegion={selectedRegion}\n              selectedHousingType={selectedHousingType}\n            />\n          </div>\n        </div>\n\n        {/* Housing Type Analysis Section */}\n        <div\n          className=\"mb-8 animate-slide-up\"\n          style={{ animationDelay: '250ms' }}\n        >\n          <div className=\"bg-white rounded-xl shadow-lg p-6 transform transition-all duration-300 hover:shadow-xl hover:-translate-y-1\">\n            <h3 className=\"text-xl font-semibold text-gray-800 mb-6\">\n              Housing Type Analysis\n            </h3>\n            <div className=\"grid grid-cols-1 xl:grid-cols-2 gap-6\">\n              <HousingTypeDistributionChart selectedRegion={selectedRegion} />\n              <PricePerSqFtChart selectedRegion={selectedRegion} />\n            </div>\n          </div>\n        </div>\n\n        {/* Market Velocity Analysis */}\n        <div\n          className=\"mb-8 animate-slide-up\"\n          style={{ animationDelay: '275ms' }}\n        >\n          <div className=\"bg-white rounded-xl shadow-lg p-6 transform transition-all duration-300 hover:shadow-xl hover:-translate-y-1\">\n            <MarketVelocityChart selectedRegion={selectedRegion} />\n          </div>\n        </div>\n\n        {/* New vs Resale Analysis */}\n        <div\n          className=\"mb-8 animate-slide-up\"\n          style={{ animationDelay: '285ms' }}\n        >\n          <div className=\"bg-white rounded-xl shadow-lg p-6 transform transition-all duration-300 hover:shadow-xl hover:-translate-y-1\">\n            <NewVsResaleChart selectedRegion={selectedRegion} />\n          </div>\n        </div>\n\n        {/* Charts Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n          {/* Price Trends Chart */}\n          <div className=\"animate-slide-up\" style={{ animationDelay: '300ms' }}>\n            <div className=\"bg-white rounded-xl shadow-lg p-6 h-full transform transition-all duration-300 hover:shadow-xl hover:-translate-y-1\">\n              <h3 className=\"text-lg font-semibold text-gray-800 mb-4 flex items-center\">\n                <span className=\"mr-2\">📈</span>\n                Average Price Trends\n              </h3>\n              <PriceChart\n                selectedRegion={selectedRegion}\n                selectedHousingType={selectedHousingType}\n              />\n            </div>\n          </div>\n\n          {/* Sales Chart */}\n          <div className=\"animate-slide-up\" style={{ animationDelay: '400ms' }}>\n            <div className=\"bg-white rounded-xl shadow-lg p-6 h-full transform transition-all duration-300 hover:shadow-xl hover:-translate-y-1\">\n              <h3 className=\"text-lg font-semibold text-gray-800 mb-4 flex items-center\">\n                <span className=\"mr-2\">📊</span>\n                Monthly Sales Volume\n              </h3>\n              <SalesChart\n                selectedRegion={selectedRegion}\n                selectedHousingType={selectedHousingType}\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Market Trends Chart */}\n        <div\n          className=\"mb-8 animate-slide-up\"\n          style={{ animationDelay: '500ms' }}\n        >\n          <div className=\"bg-white rounded-xl shadow-lg p-6 transform transition-all duration-300 hover:shadow-xl hover:-translate-y-1\">\n            <MarketTrendsChart\n              selectedRegion={selectedRegion}\n              selectedHousingType={selectedHousingType}\n            />\n          </div>\n        </div>\n\n        {/* Regional Comparison */}\n        <div\n          className=\"mb-8 animate-slide-up\"\n          style={{ animationDelay: '600ms' }}\n        >\n          <div className=\"bg-white rounded-xl shadow-lg p-6 transform transition-all duration-300 hover:shadow-xl hover:-translate-y-1\">\n            <RegionalComparison selectedHousingType={selectedHousingType} />\n          </div>\n        </div>\n\n        {/* Market Health Dashboard */}\n        <div\n          className=\"mb-8 animate-slide-up\"\n          style={{ animationDelay: '700ms' }}\n        >\n          <div className=\"bg-white rounded-xl shadow-lg p-6 transform transition-all duration-300 hover:shadow-xl hover:-translate-y-1\">\n            <MarketHealthDashboard />\n          </div>\n        </div>\n\n        {/* Geographic Map Analysis */}\n        <div\n          className=\"mb-8 animate-slide-up\"\n          style={{ animationDelay: '725ms' }}\n        >\n          <div className=\"bg-white rounded-xl shadow-lg p-6 transform transition-all duration-300 hover:shadow-xl hover:-translate-y-1\">\n            <HousingMapDashboard />\n          </div>\n        </div>\n\n        {/* Market Insights with enhanced styling */}\n        <div\n          className=\"mb-8 animate-slide-up\"\n          style={{ animationDelay: '750ms' }}\n        >\n          <div className=\"bg-white rounded-xl shadow-lg p-6 transform transition-all duration-300 hover:shadow-xl hover:-translate-y-1\">\n            <h3 className=\"text-xl font-semibold text-gray-800 mb-6 flex items-center\">\n              <span className=\"mr-2\">💡</span>\n              Market Insights & Recommendations\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"flex items-start space-x-4 p-4 bg-blue-50 rounded-lg transform transition-all duration-300 hover:scale-105\">\n                <span className=\"text-3xl animate-bounce\">📈</span>\n                <div>\n                  <h4 className=\"font-semibold text-gray-800 mb-1\">\n                    Price Trend Analysis\n                  </h4>\n                  <p className=\"text-sm text-gray-600\">\n                    {selectedRegion} shows strong price appreciation with{' '}\n                    {selectedHousingType} properties leading the market growth\n                  </p>\n                </div>\n              </div>\n              <div className=\"flex items-start space-x-4 p-4 bg-green-50 rounded-lg transform transition-all duration-300 hover:scale-105\">\n                <span className=\"text-3xl animate-pulse\">🏘️</span>\n                <div>\n                  <h4 className=\"font-semibold text-gray-800 mb-1\">\n                    Market Activity\n                  </h4>\n                  <p className=\"text-sm text-gray-600\">\n                    High buyer demand with limited inventory creating\n                    competitive bidding situations\n                  </p>\n                </div>\n              </div>\n              <div className=\"flex items-start space-x-4 p-4 bg-yellow-50 rounded-lg transform transition-all duration-300 hover:scale-105\">\n                <span className=\"text-3xl animate-spin-slow\">⏱️</span>\n                <div>\n                  <h4 className=\"font-semibold text-gray-800 mb-1\">\n                    Speed of Sales\n                  </h4>\n                  <p className=\"text-sm text-gray-600\">\n                    Properties selling{' '}\n                    {Math.abs(\n                      getDataForRegionAndType(\n                        'keyMetrics',\n                        selectedRegion,\n                        selectedHousingType\n                      )?.daysChange || 2.5\n                    )}\n                    % faster than last month\n                  </p>\n                </div>\n              </div>\n              <div className=\"flex items-start space-x-4 p-4 bg-purple-50 rounded-lg transform transition-all duration-300 hover:scale-105\">\n                <span className=\"text-3xl animate-wiggle\">🎯</span>\n                <div>\n                  <h4 className=\"font-semibold text-gray-800 mb-1\">\n                    Strategic Recommendation\n                  </h4>\n                  <p className=\"text-sm text-gray-600\">\n                    Optimal time for sellers to list. Buyers should act quickly\n                    with pre-approved financing\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n}\n\nexport default Dashboard;\n"],"names":["PriceChart","_ref","selectedRegion","selectedHousingType","data","getDataForRegionAndType","CustomTooltip","_ref2","active","payload","label","length","_jsxs","className","children","_jsx","value","toLocaleString","ResponsiveContainer","width","height","LineChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","stroke","XAxis","dataKey","tick","fontSize","angle","textAnchor","YAxis","tickFormatter","concat","toFixed","Tooltip","content","Legend","Line","type","strokeWidth","dot","r","activeDot","name","React","BarChart","Bar","fill","radius","metricsPair","setMetricsPair","useState","trendsData","getMarketTrendsData","metricsPairs","title","leftMetric","leftName","leftColor","rightMetric","rightName","rightColor","showArea","activeMetrics","map","entry","index","style","backgroundColor","color","Object","entries","_ref3","key","onClick","ComposedChart","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","tickLine","axisLine","yAxisId","orientation","wrapperStyle","paddingTop","iconType","Area","fillOpacity","opacity","distributionData","housingData","housingTypeDistribution","COLORS","percentage","count","avgPrice","PieChart","Pie","cx","cy","labelLine","midAngle","innerRadius","outerRadius","percent","x","Math","cos","PI","y","sin","dominantBaseline","nameKey","Cell","item","reduce","prev","current","sum","sqFtData","pricePerSqFt","avgSqFt","cursor","efficiency","isHighEfficiency","isMediumEfficiency","min","d","max","velocityData","marketVelocity","scatterData","_objectSpread","daysOnMarket","z","salesVolume","CustomDot","props","sqrt","ScatterChart","domain","position","Scatter","shape","velocity","isHot","isModerate","filter","_chartData$reduce$typ","viewMode","setViewMode","newVsResaleData","newVsResale","chartData","getChartData","totalNew","newUnits","totalResale","resaleUnits","total","totalUnits","newPercentage","pricePremium","resaleAvgPrice","newAvgPrice","resalePercentage","totalNewUnits","totalResaleUnits","newMarketShare","avgNewPrice","avgResalePrice","avgPricePremium","_Fragment","PIE_COLORS","stackId","undefined","hide","isNewDominated","parseFloat","toLowerCase","priceToIncomeRatios","ratio","benchmark","status","trend","marketTemperature","overall","priceGrowth","inventory","timeOnMarket","supplyDemandMetrics","monthsOfInventory","newListings","absorptionRate","demandIndex","supplyIndex","riskIndicators","overvaluation","interestRateSensitivity","speculativeActivity","householdDebt","overallRisk","riskScore","marketHealthTrends","month","healthScore","riskLevel","marketForecasts","priceGrowthNext12Months","confidence","keyRisks","outlook","recommendedActions","keyPerformanceIndicators","marketHealth","affordability","sustainability","growth","stability","regional","health","risk","opportunity","MarketHealthDashboard","setSelectedRegion","regions","keys","region","replace","priceToIncome","temperature","tempData","metric","interestSensitivity","forecast","currentGrowth","getTempColor","includes","onChange","e","target","disabled","AreaChart","regionData","forecastData","score","HousingMapDashboard","mapRef","useRef","mapView","setMapView","selectedMetric","setSelectedMetric","mapType","setMapType","isLoading","setIsLoading","housingGeoData","useMemo","municipality","geometry","affordabilityRate","marketTemp","useEffect","Map","basemap","view","MapView","container","center","zoom","popup","dockEnabled","dockOptions","breakpoint","housingLayer","GraphicsLayer","getSymbol","size","priceRatio","SimpleMarkerSymbol","outline","createHeatmapLayer","removeAll","forEach","intensity","getHeatmapIntensity","i","offsetLat","random","offsetLng","point","longitude","latitude","symbol","graphic","Graphic","attributes","add","round","updateMapGraphics","popupTemplate","PopupTemplate","fieldInfos","fieldName","visible","destroy","err","icon","ref","minHeight","KeyMetrics","formatChange","isPositive","designSystem","change","success","danger","abs","metricCards","Intl","NumberFormat","currency","minimumFractionDigits","maximumFractionDigits","format","priceChange","bgGradient","primary","shadowColor","card","borderColor","totalSales","salesChange","avgDaysOnMarket","daysChange","warning","inventoryChange","accent","h3","bodySmall","gridResponsive4","gridGap","role","transition","hoverScale","animationDelay","medium","enhancedMetrics","getEnhancedMarketData","activeTab","setActiveTab","metricGroups","price","averagePrice","medianPrice","medianPriceChange","pricePerSqFtChange","listToSaleRatio","listToSaleChange","activity","daysOnMarketChange","newListingsChange","absorptionRateChange","market","priceToIncomeChange","sellerMarketIndex","description","affordabilityIndex","tab","transitionDelay","metrics","getRegionalComparisonData","currentMetric","find","m","isHigherBetter","formatValue","_data$find","regionValue","ontarioAvg","ontarioAverage","difference","percentDiff","getBarColor","layout","ReferenceLine","fontWeight","diff","exportAllDashboardData","marketHealthData","timestamp","Date","toISOString","split","filename","allData","push","Section","Region","keyMetrics","Metric","Value","Unit","Period","Description","location","Municipality","Longitude","Latitude","riskData","priceIncomeData","share","priceData","dataPoint","Month","salesData","sales","healthTrends","salesActivity","marketConfidence","exportToCSV","headers","csvContent","join","row","header","blob","Blob","link","document","createElement","download","url","URL","createObjectURL","setAttribute","visibility","body","appendChild","click","removeChild","error","_getDataForRegionAndT","handleMasterExport","EnhancedMetrics","HousingTypeDistributionChart","PricePerSqFtChart","MarketVelocityChart","NewVsResaleChart","SalesChart","MarketTrendsChart","RegionalComparison"],"sourceRoot":""}
{"version":3,"file":"static/js/9942.467545e1.chunk.js","mappings":"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","sources":["data/airbnbData.js","utils/airbnbRealScraper.js","components/AirBnbDashboard.js"],"sourcesContent":["import { format, subMonths, startOfMonth } from 'date-fns';\n\n// Function to aggregate city data into Peel Region data\nconst aggregatePeelRegionData = (cityData, month, date) => {\n  const cities = cityData.filter(item => item.month === month);\n  if (cities.length === 0) return null;\n\n  // Calculate weighted averages and totals\n  const totalListings = cities.reduce(\n    (sum, city) => sum + city.totalListings,\n    0\n  );\n  const weightedAveragePrice = Math.round(\n    cities.reduce(\n      (sum, city) => sum + city.averagePrice * city.totalListings,\n      0\n    ) / totalListings\n  );\n  const weightedAverageRating = (\n    cities.reduce(\n      (sum, city) => sum + parseFloat(city.averageRating) * city.totalListings,\n      0\n    ) / totalListings\n  ).toFixed(1);\n  const weightedOccupancyRate = Math.round(\n    cities.reduce(\n      (sum, city) => sum + city.occupancyRate * city.totalListings,\n      0\n    ) / totalListings\n  );\n  const totalNewListings = cities.reduce(\n    (sum, city) => sum + city.newListings,\n    0\n  );\n  const totalReviews = cities.reduce((sum, city) => sum + city.reviewCount, 0);\n  const weightedSuperhostPercentage = Math.round(\n    cities.reduce(\n      (sum, city) => sum + city.superhostPercentage * city.totalListings,\n      0\n    ) / totalListings\n  );\n  const weightedResponseTime = Math.round(\n    cities.reduce(\n      (sum, city) => sum + city.averageResponseTime * city.totalListings,\n      0\n    ) / totalListings\n  );\n\n  // Aggregate property types\n  const aggregatedPropertyTypes = [];\n  const propertyTypeMap = {};\n\n  cities.forEach(city => {\n    city.propertyTypes.forEach(type => {\n      if (!propertyTypeMap[type.type]) {\n        propertyTypeMap[type.type] = { type: type.type, count: 0 };\n      }\n      propertyTypeMap[type.type].count += type.count;\n    });\n  });\n\n  Object.values(propertyTypeMap).forEach(type => {\n    type.percentage = Math.round((type.count / totalListings) * 100);\n    aggregatedPropertyTypes.push(type);\n  });\n\n  // Aggregate price ranges\n  const aggregatedPriceRanges = [];\n  const priceRangeMap = {};\n\n  cities.forEach(city => {\n    city.priceRanges.forEach(range => {\n      if (!priceRangeMap[range.range]) {\n        priceRangeMap[range.range] = { range: range.range, count: 0 };\n      }\n      priceRangeMap[range.range].count += range.count;\n    });\n  });\n\n  aggregatedPriceRanges.push(...Object.values(priceRangeMap));\n\n  // Average amenity popularity\n  const aggregatedAmenities = [];\n  const amenityMap = {};\n\n  cities.forEach(city => {\n    city.amenityPopularity.forEach(amenity => {\n      if (!amenityMap[amenity.amenity]) {\n        amenityMap[amenity.amenity] = {\n          amenity: amenity.amenity,\n          totalPercentage: 0,\n          count: 0,\n        };\n      }\n      amenityMap[amenity.amenity].totalPercentage += amenity.percentage;\n      amenityMap[amenity.amenity].count += 1;\n    });\n  });\n\n  Object.values(amenityMap).forEach(amenity => {\n    aggregatedAmenities.push({\n      amenity: amenity.amenity,\n      percentage: Math.round(amenity.totalPercentage / amenity.count),\n    });\n  });\n\n  aggregatedAmenities.sort((a, b) => b.percentage - a.percentage);\n\n  return {\n    date: date,\n    month: month,\n    region: 'Peel Region',\n    averagePrice: weightedAveragePrice,\n    totalListings: totalListings,\n    averageRating: weightedAverageRating,\n    occupancyRate: weightedOccupancyRate,\n    newListings: totalNewListings,\n    reviewCount: totalReviews,\n    superhostPercentage: weightedSuperhostPercentage,\n    averageResponseTime: weightedResponseTime,\n    propertyTypes: aggregatedPropertyTypes,\n    priceRanges: aggregatedPriceRanges,\n    amenityPopularity: aggregatedAmenities,\n  };\n};\n\n// Mock historical data for demonstration\nexport const generateAirBnbHistoricalData = () => {\n  const months = 12;\n  const data = [];\n  const regions = ['Mississauga', 'Brampton', 'Caledon'];\n\n  for (let i = months - 1; i >= 0; i--) {\n    const date = subMonths(new Date(), i);\n    const monthStart = startOfMonth(date);\n    const monthLabel = format(monthStart, 'MMM yyyy');\n    const dateString = format(monthStart, 'yyyy-MM-dd');\n\n    // Generate data for each city\n    regions.forEach(region => {\n      // Simulate seasonal pricing patterns\n      const seasonalMultiplier = getSeasonalMultiplier(date.getMonth());\n      const basePrice = getRegionBasePrice(region);\n\n      data.push({\n        date: dateString,\n        month: monthLabel,\n        region: region,\n        averagePrice: Math.round(basePrice * seasonalMultiplier),\n        totalListings: Math.floor(Math.random() * 100) + 150,\n        averageRating: (Math.random() * 1.5 + 3.5).toFixed(1),\n        occupancyRate: Math.round(Math.random() * 30 + 60),\n        newListings: Math.floor(Math.random() * 20) + 5,\n        reviewCount: Math.floor(Math.random() * 500) + 100,\n        superhostPercentage: Math.round(Math.random() * 30 + 20),\n        averageResponseTime: Math.floor(Math.random() * 120) + 30, // minutes\n        propertyTypes: generatePropertyTypeData(),\n        priceRanges: generatePriceRangeData(basePrice * seasonalMultiplier),\n        amenityPopularity: generateAmenityData(),\n      });\n    });\n\n    // Generate aggregated Peel Region data\n    const monthData = data.filter(item => item.month === monthLabel);\n    const peelRegionData = aggregatePeelRegionData(\n      monthData,\n      monthLabel,\n      dateString\n    );\n    if (peelRegionData) {\n      data.push(peelRegionData);\n    }\n  }\n\n  return data;\n};\n\n// Regional base pricing\nconst getRegionBasePrice = region => {\n  const basePrices = {\n    Mississauga: 120,\n    Brampton: 95,\n    Caledon: 150,\n  };\n  return basePrices[region] || 110;\n};\n\n// Seasonal pricing multipliers\nconst getSeasonalMultiplier = month => {\n  const seasonalFactors = {\n    0: 0.8, // January\n    1: 0.8, // February\n    2: 0.9, // March\n    3: 1.0, // April\n    4: 1.1, // May\n    5: 1.3, // June\n    6: 1.4, // July\n    7: 1.4, // August\n    8: 1.2, // September\n    9: 1.1, // October\n    10: 0.9, // November\n    11: 1.0, // December\n  };\n  return seasonalFactors[month] || 1.0;\n};\n\n// Property type distribution\nconst generatePropertyTypeData = () => {\n  return [\n    {\n      type: 'Entire home/apt',\n      count: Math.floor(Math.random() * 50) + 30,\n      percentage: null,\n    },\n    {\n      type: 'Private room',\n      count: Math.floor(Math.random() * 30) + 15,\n      percentage: null,\n    },\n    {\n      type: 'Shared room',\n      count: Math.floor(Math.random() * 10) + 2,\n      percentage: null,\n    },\n    {\n      type: 'Hotel room',\n      count: Math.floor(Math.random() * 15) + 5,\n      percentage: null,\n    },\n  ].map(item => {\n    const total = 100; // Approximate total for percentage calculation\n    return { ...item, percentage: Math.round((item.count / total) * 100) };\n  });\n};\n\n// Price range distribution\nconst generatePriceRangeData = averagePrice => {\n  const ranges = [\n    { range: '$0-50', count: Math.floor(Math.random() * 10) + 2 },\n    { range: '$50-100', count: Math.floor(Math.random() * 25) + 15 },\n    { range: '$100-150', count: Math.floor(Math.random() * 30) + 20 },\n    { range: '$150-200', count: Math.floor(Math.random() * 20) + 10 },\n    { range: '$200-300', count: Math.floor(Math.random() * 15) + 8 },\n    { range: '$300+', count: Math.floor(Math.random() * 10) + 3 },\n  ];\n\n  // Adjust distribution based on average price\n  if (averagePrice > 150) {\n    ranges[4].count += 10;\n    ranges[5].count += 5;\n  } else if (averagePrice < 100) {\n    ranges[1].count += 15;\n    ranges[2].count += 10;\n  }\n\n  return ranges;\n};\n\n// Amenity popularity data\nconst generateAmenityData = () => {\n  const amenities = [\n    'WiFi',\n    'Kitchen',\n    'Washer',\n    'Air conditioning',\n    'Heating',\n    'TV',\n    'Parking',\n    'Pool',\n    'Hot tub',\n    'Gym',\n    'Pets allowed',\n  ];\n\n  return amenities\n    .map(amenity => ({\n      amenity,\n      percentage: Math.floor(Math.random() * 60) + 20, // 20-80% availability\n    }))\n    .sort((a, b) => b.percentage - a.percentage);\n};\n\n// Competitive analysis data\nexport const generateCompetitiveAnalysisData = () => {\n  const regions = ['Mississauga', 'Brampton', 'Caledon', 'Peel Region'];\n  const platforms = ['Airbnb', 'VRBO', 'Booking.com'];\n\n  return regions.map(region => {\n    const regionData = platforms.map(platform => {\n      let basePrice = 100;\n      let baseListings = 100;\n\n      // Adjust for Peel Region (larger market)\n      if (region === 'Peel Region') {\n        basePrice = 115; // Average across all cities\n        baseListings = 300; // Sum of all cities\n      }\n\n      return {\n        platform,\n        averagePrice: Math.floor(Math.random() * 50) + basePrice,\n        listingCount: Math.floor(Math.random() * 200) + baseListings,\n        averageRating: (Math.random() * 1 + 4).toFixed(1),\n        marketShare: Math.floor(Math.random() * 40) + 20,\n      };\n    });\n\n    // Normalize market share to 100%\n    const totalShare = regionData.reduce(\n      (sum, item) => sum + item.marketShare,\n      0\n    );\n    regionData.forEach(item => {\n      item.marketShare = Math.round((item.marketShare / totalShare) * 100);\n    });\n\n    return {\n      region,\n      platforms: regionData,\n    };\n  });\n};\n\n// Performance metrics calculation\nexport const calculateAirBnbMetrics = data => {\n  if (!data || data.length === 0) return null;\n\n  const latestMonth = data[data.length - 1];\n  const previousMonth = data[data.length - 2];\n\n  const calculateChange = (current, previous) => {\n    if (!previous) return 0;\n    return (((current - previous) / previous) * 100).toFixed(1);\n  };\n\n  return {\n    totalListings: data.reduce((sum, item) => sum + item.totalListings, 0),\n    averagePrice: {\n      current: latestMonth?.averagePrice || 0,\n      change: calculateChange(\n        latestMonth?.averagePrice,\n        previousMonth?.averagePrice\n      ),\n    },\n    occupancyRate: {\n      current: latestMonth?.occupancyRate || 0,\n      change: calculateChange(\n        latestMonth?.occupancyRate,\n        previousMonth?.occupancyRate\n      ),\n    },\n    averageRating: {\n      current: latestMonth?.averageRating || 0,\n      change: calculateChange(\n        latestMonth?.averageRating,\n        previousMonth?.averageRating\n      ),\n    },\n    newListings: {\n      current: latestMonth?.newListings || 0,\n      change: calculateChange(\n        latestMonth?.newListings,\n        previousMonth?.newListings\n      ),\n    },\n    superhostPercentage: latestMonth?.superhostPercentage || 0,\n    averageResponseTime: latestMonth?.averageResponseTime || 0,\n  };\n};\n\n// Revenue estimation\nexport const estimateAirBnbRevenue = (data, region) => {\n  const regionData = data.filter(item => item.region === region);\n  if (regionData.length === 0) return null;\n\n  const latestData = regionData[regionData.length - 1];\n  const averagePrice = latestData.averagePrice;\n  const occupancyRate = latestData.occupancyRate / 100;\n  const totalListings = latestData.totalListings;\n\n  // Estimate monthly revenue per listing\n  const daysInMonth = 30;\n  const averageBookingDuration = 3; // days\n  const bookingsPerMonth =\n    (daysInMonth * occupancyRate) / averageBookingDuration;\n  const monthlyRevenuePerListing =\n    bookingsPerMonth * averagePrice * averageBookingDuration;\n\n  // Total market revenue estimate\n  const totalMarketRevenue = monthlyRevenuePerListing * totalListings;\n\n  return {\n    region,\n    monthlyRevenuePerListing: Math.round(monthlyRevenuePerListing),\n    totalMarketRevenue: Math.round(totalMarketRevenue),\n    averagePrice,\n    occupancyRate: Math.round(occupancyRate * 100),\n    estimatedBookingsPerMonth: Math.round(bookingsPerMonth),\n    averageBookingDuration,\n  };\n};\n\n// Market opportunity analysis\nexport const analyzeMarketOpportunity = data => {\n  const regions = ['Mississauga', 'Brampton', 'Caledon', 'Peel Region'];\n\n  return regions\n    .map(region => {\n      const regionData = data.filter(item => item.region === region);\n      const latest = regionData[regionData.length - 1];\n      const sixMonthsAgo = regionData[regionData.length - 6];\n\n      if (!latest || !sixMonthsAgo) return null;\n\n      const priceGrowth =\n        ((latest.averagePrice - sixMonthsAgo.averagePrice) /\n          sixMonthsAgo.averagePrice) *\n        100;\n      const listingGrowth =\n        ((latest.totalListings - sixMonthsAgo.totalListings) /\n          sixMonthsAgo.totalListings) *\n        100;\n      const demandIndicator = latest.occupancyRate;\n\n      // Opportunity score calculation (0-100)\n      let opportunityScore = 0;\n\n      // High occupancy = good demand\n      if (demandIndicator > 80) opportunityScore += 30;\n      else if (demandIndicator > 70) opportunityScore += 20;\n      else if (demandIndicator > 60) opportunityScore += 10;\n\n      // Positive price growth = market strength\n      if (priceGrowth > 10) opportunityScore += 25;\n      else if (priceGrowth > 5) opportunityScore += 15;\n      else if (priceGrowth > 0) opportunityScore += 10;\n\n      // Moderate listing growth = healthy competition\n      if (listingGrowth > 0 && listingGrowth < 20) opportunityScore += 20;\n      else if (listingGrowth > 20) opportunityScore += 10; // High competition\n\n      // High ratings indicate quality market\n      if (latest.averageRating > 4.5) opportunityScore += 15;\n      else if (latest.averageRating > 4.0) opportunityScore += 10;\n      else if (latest.averageRating > 3.5) opportunityScore += 5;\n\n      // Response time factor\n      if (latest.averageResponseTime < 60) opportunityScore += 10;\n      else if (latest.averageResponseTime < 120) opportunityScore += 5;\n\n      return {\n        region,\n        opportunityScore: Math.min(opportunityScore, 100),\n        metrics: {\n          priceGrowth: priceGrowth.toFixed(1),\n          listingGrowth: listingGrowth.toFixed(1),\n          occupancyRate: demandIndicator,\n          averageRating: latest.averageRating,\n          averageResponseTime: latest.averageResponseTime,\n        },\n        recommendation: getOpportunityRecommendation(opportunityScore),\n        risks: identifyMarketRisks(latest, priceGrowth, listingGrowth),\n      };\n    })\n    .filter(Boolean);\n};\n\nconst getOpportunityRecommendation = score => {\n  if (score >= 80)\n    return 'Excellent market opportunity - High demand, strong pricing, quality standards';\n  if (score >= 60)\n    return 'Good market opportunity - Solid fundamentals with growth potential';\n  if (score >= 40)\n    return 'Moderate opportunity - Consider market conditions and competition';\n  return 'Limited opportunity - High competition or market challenges';\n};\n\nconst identifyMarketRisks = (data, priceGrowth, listingGrowth) => {\n  const risks = [];\n\n  if (listingGrowth > 25)\n    risks.push('High competition - Rapid increase in listings');\n  if (data.occupancyRate < 60)\n    risks.push('Low demand - Below average occupancy rates');\n  if (priceGrowth < -5) risks.push('Price decline - Negative pricing trend');\n  if (data.averageRating < 4.0)\n    risks.push('Quality concerns - Below average guest satisfaction');\n  if (data.averageResponseTime > 180)\n    risks.push('Service issues - Slow host response times');\n\n  return risks.length > 0 ? risks : ['No significant risks identified'];\n};\n\n// Export the main data\nexport const airbnbHistoricalData = generateAirBnbHistoricalData();\nexport const airbnbCompetitiveData = generateCompetitiveAnalysisData();\nexport const airbnbMetrics = calculateAirBnbMetrics(airbnbHistoricalData);\nexport const airbnbOpportunityAnalysis =\n  analyzeMarketOpportunity(airbnbHistoricalData);\n","import axios from 'axios';\nimport { format } from 'date-fns';\nimport logger from './logger';\n\nclass AirBnbRealScraper {\n  constructor() {\n    this.baseUrl = 'https://www.airbnb.com';\n    this.searchUrl = '/api/v3/StaysSearch';\n    this.rateLimit = 2000; // 2 seconds between requests to be respectful\n    this.lastRequestTime = 0;\n    this.corsProxies = [\n      'https://cors-anywhere.herokuapp.com/',\n      'https://api.allorigins.win/raw?url=',\n      'https://proxy.cors.sh/',\n    ];\n\n    this.client = axios.create({\n      timeout: 15000,\n      headers: {\n        'User-Agent':\n          'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\n        Accept:\n          'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\n        'Accept-Language': 'en-US,en;q=0.5',\n        'Accept-Encoding': 'gzip, deflate, br',\n        Connection: 'keep-alive',\n        'Upgrade-Insecure-Requests': '1',\n        'Sec-Fetch-Dest': 'document',\n        'Sec-Fetch-Mode': 'navigate',\n        'Sec-Fetch-Site': 'none',\n        'Cache-Control': 'max-age=0',\n      },\n    });\n\n    this.rateLimiter = {\n      requests: 0,\n      lastReset: Date.now(),\n      maxRequests: 10,\n      timeWindow: 60000, // 1 minute\n    };\n  }\n\n  async waitForRateLimit() {\n    const now = Date.now();\n    const timeSinceLastRequest = now - this.lastRequestTime;\n\n    if (timeSinceLastRequest < this.rateLimit) {\n      const waitTime = this.rateLimit - timeSinceLastRequest;\n      logger.debug(`Rate limiting: waiting ${waitTime}ms`);\n      await new Promise(resolve => setTimeout(resolve, waitTime));\n    }\n\n    this.lastRequestTime = Date.now();\n  }\n\n  // Build AirBnB search URL for direct scraping\n  buildSearchUrl(location, checkIn, checkOut, adults = 2) {\n    const checkinDate = format(new Date(checkIn), 'yyyy-MM-dd');\n    const checkoutDate = format(new Date(checkOut), 'yyyy-MM-dd');\n\n    const params = new URLSearchParams({\n      place_id: '',\n      query: location,\n      checkin: checkinDate,\n      checkout: checkoutDate,\n      adults: adults.toString(),\n      children: '0',\n      infants: '0',\n      pets: '0',\n      page: '1',\n      tab_id: 'home_tab',\n      refinement_paths: '[]',\n      flexible_trip_lengths: '[\"weekend_trip\"]',\n      monthly_start_date: checkinDate,\n      monthly_length: '3',\n      price_filter_input_type: '0',\n      channel: 'EXPLORE',\n      date_picker_type: 'calendar',\n      source: 'structured_search_input_header',\n      search_type: 'autocomplete_click',\n    });\n\n    return `${this.baseUrl}/s/${encodeURIComponent(location)}/homes?${params.toString()}`;\n  }\n\n  // Rate limiting to avoid overwhelming servers\n  async rateLimit() {\n    const now = Date.now();\n\n    // Reset counter if time window has passed\n    if (now - this.rateLimiter.lastReset > this.rateLimiter.timeWindow) {\n      this.rateLimiter.requests = 0;\n      this.rateLimiter.lastReset = now;\n    }\n\n    // If we've hit the limit, wait\n    if (this.rateLimiter.requests >= this.rateLimiter.maxRequests) {\n      const waitTime =\n        this.rateLimiter.timeWindow - (now - this.rateLimiter.lastReset);\n      logger.debug(`Rate limiting: waiting ${waitTime}ms`);\n      await new Promise(resolve => setTimeout(resolve, waitTime));\n\n      // Reset after waiting\n      this.rateLimiter.requests = 0;\n      this.rateLimiter.lastReset = Date.now();\n    }\n\n    this.rateLimiter.requests++;\n  }\n\n  // Method 1: Direct API call (works in backend/extension)\n  async tryDirectApiCall(location, checkIn, checkOut, adults) {\n    try {\n      await this.rateLimit();\n\n      // AirBnB's search API endpoint (simplified)\n      const apiUrl = `https://www.airbnb.com/api/v3/StaySearch`;\n\n      const params = {\n        operationName: 'StaysSearch',\n        locale: 'en',\n        currency: 'CAD',\n        variables: {\n          request: {\n            metadataOnly: false,\n            version: '1.8.6',\n            tabId: 'home_tab',\n            refinementPaths: ['/homes'],\n            flexibleTripLengths: [],\n            dateSearchType: 'calendar',\n            placeId: null,\n            source: 'structured_search_input_header',\n            searchType: 'pagination',\n            query: location,\n            cdnCacheSafe: false,\n            simpleSearchTreatment: 'simple_search_only',\n            treatmentFlags: ['simple_search_only', 'simple_search_desktop_v3'],\n            searchByMap: false,\n            isInitialLoad: true,\n          },\n        },\n      };\n\n      logger.debug('🔄 Attempting direct API call...');\n\n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'User-Agent':\n            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\n          Accept: 'application/json, text/plain, */*',\n          'Accept-Language': 'en-US,en;q=0.5',\n          'Accept-Encoding': 'gzip, deflate, br',\n          'X-Airbnb-Api-Key': 'd306zoyjsyarp7ifhu67rjxn52tv0t20', // Public API key\n          'X-Airbnb-GraphQL-Platform': 'web',\n          'X-Airbnb-GraphQL-Platform-Client': 'minimalist-niobe',\n          'X-Airbnb-Supports-Airlock-V2': 'true',\n          'X-Niobe-Short-Circuited': 'true',\n          'X-CSRF-Token': 'null',\n          'X-CSRF-Without-Token': '1',\n        },\n        body: JSON.stringify(params),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n\n        if (data.data && data.data.dora && data.data.dora.exploreV3) {\n          const sections = data.data.dora.exploreV3.sections;\n          let listings = [];\n\n          sections.forEach(section => {\n            if (section.items) {\n              section.items.forEach(item => {\n                if (item.listing) {\n                  listings.push(this.parseApiListing(item.listing));\n                }\n              });\n            }\n          });\n\n          logger.debug('✅ Direct API call successful!');\n          return listings;\n        }\n      }\n\n      throw new Error('Invalid response structure');\n    } catch (error) {\n      logger.warn('❌ Direct API call failed:', error.message);\n      throw error;\n    }\n  }\n\n  // Method 2: Try different CORS proxies\n  async tryCorsProxy(location, checkIn, checkOut, adults) {\n    const proxies = [\n      'https://cors-anywhere.herokuapp.com/',\n      'https://api.allorigins.win/raw?url=',\n      'https://crossorigin.me/',\n    ];\n\n    for (const proxy of proxies) {\n      try {\n        await this.rateLimit();\n\n        logger.debug(`🔄 Attempting CORS proxy: ${proxy}`);\n\n        const searchUrl = `https://www.airbnb.ca/s/${encodeURIComponent(location)}/homes`;\n        const proxiedUrl = proxy + encodeURIComponent(searchUrl);\n\n        const response = await fetch(proxiedUrl, {\n          headers: {\n            'User-Agent':\n              'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\n          },\n        });\n\n        if (response.ok) {\n          const html = await response.text();\n          const listings = this.parseHtmlResponse(html);\n\n          if (listings.length > 0) {\n            logger.debug(`✅ CORS proxy successful: ${proxy}`);\n            return listings;\n          }\n        }\n      } catch (error) {\n        logger.warn(`❌ CORS proxy failed (${proxy}):`, error.message);\n        continue;\n      }\n    }\n\n    throw new Error('All CORS proxies failed');\n  }\n\n  // Method 3: Try alternative endpoints\n  async tryAlternativeEndpoints(location, checkIn, checkOut, adults) {\n    const endpoints = [\n      `https://www.airbnb.com/api/v2/explore_tabs?_format=for_explore_search_web`,\n      `https://www.airbnb.com/api/v3/StaySearch`,\n      `https://www.airbnb.com/api/v2/search_results`,\n    ];\n\n    for (const endpoint of endpoints) {\n      try {\n        await this.rateLimit();\n\n        logger.debug(`🔄 Attempting alternative endpoint: ${endpoint}`);\n\n        const response = await fetch(endpoint, {\n          method: 'GET',\n          headers: {\n            'User-Agent': 'Mozilla/5.0 (compatible; housing-dashboard/1.0)',\n            Accept: 'application/json',\n          },\n        });\n\n        if (response.ok) {\n          const data = await response.json();\n          const listings = this.parseEndpointResponse(data);\n\n          if (listings.length > 0) {\n            logger.debug(`✅ Alternative endpoint successful: ${endpoint}`);\n            return listings;\n          }\n        }\n      } catch (error) {\n        logger.warn(\n          `❌ Alternative endpoint failed (${endpoint}):`,\n          error.message\n        );\n        continue;\n      }\n    }\n\n    throw new Error('All alternative endpoints failed');\n  }\n\n  // Parse API response listing\n  parseApiListing(listing) {\n    try {\n      return {\n        id: listing.id,\n        name: listing.name,\n        price: listing.pricing?.rate?.amount || 0,\n        currency: listing.pricing?.rate?.currency || 'CAD',\n        roomType: listing.roomTypeCategory,\n        latitude: listing.lat,\n        longitude: listing.lng,\n        neighborhood: listing.neighborhoodOverview?.localizedName,\n        rating: listing.avgRating,\n        reviewCount: listing.reviewsCount,\n        amenities: listing.listingAmenities || [],\n        photos: listing.pictures?.map(pic => pic.picture) || [],\n        availability: listing.availability || {},\n        verified: listing.isVerified || false,\n      };\n    } catch (error) {\n      logger.error('Error parsing API response:', error);\n      return null;\n    }\n  }\n\n  // Parse HTML response (fallback method)\n  parseHtmlResponse(html) {\n    try {\n      // Basic HTML parsing for listings\n      const listingRegex = /\"listing\":({[^}]+})/g;\n      const listings = [];\n      let match;\n\n      while ((match = listingRegex.exec(html)) !== null) {\n        try {\n          const listingData = JSON.parse(match[1]);\n          listings.push(this.parseApiListing(listingData));\n        } catch (e) {\n          // Skip invalid JSON\n          continue;\n        }\n      }\n\n      return listings.filter(l => l !== null);\n    } catch (error) {\n      logger.error('Error parsing HTML response:', error);\n      return [];\n    }\n  }\n\n  // Parse endpoint response\n  parseEndpointResponse(data) {\n    // Implementation would depend on endpoint structure\n    return [];\n  }\n\n  // Method 4: HTML parsing fallback\n  async tryHtmlParsing(location, checkIn, checkOut, adults) {\n    try {\n      await this.rateLimit();\n\n      logger.debug('📝 Attempting HTML parsing fallback...');\n\n      const searchUrl = `https://www.airbnb.ca/s/${encodeURIComponent(location)}/homes`;\n\n      // This would normally require a CORS proxy or backend\n      const response = await fetch(searchUrl, {\n        headers: {\n          'User-Agent':\n            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\n        },\n      });\n\n      if (response.ok) {\n        const html = await response.text();\n        return this.parseHtmlResponse(html);\n      }\n\n      throw new Error('HTML fetch failed');\n    } catch (error) {\n      logger.warn('HTML parsing failed:', error.message);\n      throw error;\n    }\n  }\n\n  // Main scraping method with multiple fallbacks\n  async scrapeRealData(location, checkIn = null, checkOut = null, adults = 2) {\n    const methods = [\n      this.tryDirectApiCall.bind(this),\n      this.tryCorsProxy.bind(this),\n      this.tryAlternativeEndpoints.bind(this),\n      this.tryHtmlParsing.bind(this),\n    ];\n\n    logger.info(`🔍 Starting real AirBnB scraping for ${location}...`);\n    logger.debug(\n      `📅 Check-in: ${checkIn}, Check-out: ${checkOut}, Adults: ${adults}`\n    );\n\n    for (const method of methods) {\n      try {\n        const result = await method(location, checkIn, checkOut, adults);\n\n        if (result && result.length > 0) {\n          logger.info(\n            `✅ Scraping successful! Found ${result.length} listings`\n          );\n          return result;\n        }\n      } catch (error) {\n        logger.debug(`❌ Method failed:`, error.message);\n        continue;\n      }\n    }\n\n    // All methods failed\n    logger.warn(\n      '❌ All scraping methods failed. This is expected in browser environments.'\n    );\n    logger.info(\n      '💡 Consider using a backend service or browser extension for real scraping.'\n    );\n\n    // Return empty array instead of throwing\n    return [];\n  }\n\n  // Process and validate real listings\n  processRealListings(listings) {\n    return listings\n      .filter(listing => listing.pricePerNight > 0) // Filter out invalid data\n      .map(listing => ({\n        ...listing,\n        pricePerNight: parseFloat(listing.pricePerNight) || 0,\n        rating: parseFloat(listing.rating) || 0,\n        reviewCount: parseInt(listing.reviewCount) || 0,\n        processed: true,\n        processedAt: new Date().toISOString(),\n      }))\n      .sort((a, b) => b.reviewCount - a.reviewCount); // Sort by review count\n  }\n\n  // Test connectivity\n  async testConnectivity() {\n    try {\n      logger.debug('🧪 Testing AirBnB connectivity...');\n\n      const testUrl = 'https://www.airbnb.com/api/v2/explore_tabs';\n      await fetch(testUrl, {\n        method: 'HEAD',\n        mode: 'no-cors',\n      });\n\n      logger.debug('✅ Connection test successful!');\n      return true;\n    } catch (error) {\n      logger.error('❌ Connection test failed:', error.message);\n      return false;\n    }\n  }\n\n  // Get suggested implementation approaches\n  getImplementationSuggestions() {\n    return {\n      frontend: {\n        title: 'Frontend Approaches (Limited)',\n        options: [\n          {\n            name: 'CORS Proxy',\n            description: 'Use public CORS proxies (unreliable, may be blocked)',\n            difficulty: 'Easy',\n            reliability: 'Low',\n          },\n          {\n            name: 'Browser Extension',\n            description: 'Create extension with elevated permissions',\n            difficulty: 'Medium',\n            reliability: 'Medium',\n          },\n        ],\n      },\n      backend: {\n        title: 'Backend Approaches (Recommended)',\n        options: [\n          {\n            name: 'Node.js + Puppeteer',\n            description:\n              'Headless browser automation for JavaScript-heavy sites',\n            difficulty: 'Medium',\n            reliability: 'High',\n          },\n          {\n            name: 'Python + Selenium',\n            description: 'Browser automation with extensive scraping libraries',\n            difficulty: 'Medium',\n            reliability: 'High',\n          },\n          {\n            name: 'Proxy + Cheerio',\n            description: 'Server-side HTML parsing with rotating proxies',\n            difficulty: 'Hard',\n            reliability: 'Medium',\n          },\n        ],\n      },\n      apis: {\n        title: 'Alternative Data Sources',\n        options: [\n          {\n            name: 'RapidAPI AirBnB',\n            description: 'Third-party APIs that provide AirBnB data',\n            difficulty: 'Easy',\n            reliability: 'High',\n          },\n          {\n            name: 'InsideAirbnb.com',\n            description: 'Open dataset of AirBnB listings',\n            difficulty: 'Easy',\n            reliability: 'Medium',\n          },\n        ],\n      },\n    };\n  }\n}\n\nexport default AirBnbRealScraper;\n","import React, { useState } from 'react';\nimport {\n  LineChart,\n  Line,\n  BarChart,\n  Bar,\n  PieChart,\n  Pie,\n  Cell,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from 'recharts';\nimport {\n  airbnbHistoricalData,\n  airbnbCompetitiveData,\n  airbnbMetrics,\n  airbnbOpportunityAnalysis,\n  estimateAirBnbRevenue,\n} from '../data/airbnbData';\nimport AirBnbRealScraper from '../utils/airbnbRealScraper';\n// import { aprilAnalysisService } from '../data/aprilAnalysisData'; // Unused\nimport designSystem from '../styles/designSystem';\nimport logger from '../utils/logger';\n\nconst AirBnbDashboard = ({ selectedRegion: propSelectedRegion }) => {\n  // Define valid regions first - memoized to prevent re-renders\n  const regions = React.useMemo(\n    () => ['Peel Region', 'Mississauga', 'Brampton', 'Caledon'],\n    []\n  );\n\n  // Initialize with a valid region\n  const getValidInitialRegion = () => {\n    if (propSelectedRegion && regions.includes(propSelectedRegion)) {\n      return propSelectedRegion;\n    }\n    // Check if propSelectedRegion has data in AirBnB dataset\n    if (\n      propSelectedRegion &&\n      airbnbHistoricalData.some(item => item.region === propSelectedRegion)\n    ) {\n      return propSelectedRegion;\n    }\n    return 'Peel Region'; // Default to Peel Region\n  };\n\n  const [selectedRegion, setSelectedRegion] = useState(getValidInitialRegion());\n\n  // Track if region change is from user interaction to prevent prop override\n  const userChangedRegion = React.useRef(false);\n\n  // Handler for manual region changes\n  const handleRegionChange = React.useCallback(\n    newRegion => {\n      logger.info('AirBnB Dashboard Manual Region Change', {\n        from: selectedRegion,\n        to: newRegion,\n        userInitiated: true,\n      });\n      userChangedRegion.current = true;\n      setSelectedRegion(newRegion);\n      // Reset the flag after a short delay to allow prop changes again\n      setTimeout(() => {\n        userChangedRegion.current = false;\n      }, 100);\n    },\n    [selectedRegion]\n  );\n\n  // Sync with prop changes, but validate if the region has data\n  React.useEffect(() => {\n    // Don't override if user just changed the region manually\n    if (userChangedRegion.current) return;\n\n    if (propSelectedRegion && propSelectedRegion !== selectedRegion) {\n      // Check if the prop region has data in AirBnB dataset\n      const hasData = airbnbHistoricalData.some(\n        item => item.region === propSelectedRegion\n      );\n\n      if (hasData) {\n        setSelectedRegion(propSelectedRegion);\n      } else {\n        // Fallback to first available region with data\n        const availableRegions = [\n          ...new Set(airbnbHistoricalData.map(item => item.region)),\n        ];\n        const fallbackRegion =\n          availableRegions.find(region => regions.includes(region)) ||\n          'Peel Region';\n        setSelectedRegion(fallbackRegion);\n        logger.warn('AirBnB Dashboard', {\n          message: 'Selected region has no AirBnB data, falling back',\n          originalRegion: propSelectedRegion,\n          fallbackRegion,\n          availableRegions,\n        });\n      }\n    }\n  }, [propSelectedRegion, regions, selectedRegion]);\n  const [selectedTimeframe, setSelectedTimeframe] = useState('6');\n  const [activeTab, setActiveTab] = useState('overview');\n  const [realScrapingEnabled, setRealScrapingEnabled] = useState(false);\n  const [scrapingStatus, setScrapingStatus] = useState('idle'); // idle, loading, success, error\n  const [realListings, setRealListings] = useState([]);\n  const [scrapingError, setScrapingError] = useState(null);\n\n  const timeframes = [\n    { value: '3', label: '3 Months' },\n    { value: '6', label: '6 Months' },\n    { value: '12', label: '12 Months' },\n  ];\n\n  // Filter data based on selections\n  const filteredData = airbnbHistoricalData\n    .filter(item => item.region === selectedRegion)\n    .slice(-parseInt(selectedTimeframe));\n\n  // Safety check for empty data\n  if (filteredData.length === 0) {\n    logger.warn('AirBnB Dashboard', {\n      message: 'No data found for selected region',\n      selectedRegion,\n      availableRegions: [\n        ...new Set(airbnbHistoricalData.map(item => item.region)),\n      ],\n    });\n  }\n\n  // Log region changes\n  React.useEffect(() => {\n    logger.info('AirBnB Dashboard Region Changed', {\n      selectedRegion,\n      filteredDataLength: filteredData.length,\n      hasData: filteredData.length > 0,\n    });\n  }, [selectedRegion, filteredData]);\n\n  const revenueEstimate = estimateAirBnbRevenue(\n    airbnbHistoricalData,\n    selectedRegion\n  );\n  const opportunityData = airbnbOpportunityAnalysis.find(\n    item => item.region === selectedRegion\n  );\n  const competitiveData = airbnbCompetitiveData.find(\n    item => item.region === selectedRegion\n  );\n\n  // Chart colors - using design system\n  const colors = designSystem.chartColors.palette;\n\n  // Real scraping functionality\n  const handleRealScraping = async () => {\n    if (!realScrapingEnabled) {\n      setRealScrapingEnabled(true);\n      return;\n    }\n\n    setScrapingStatus('loading');\n    setScrapingError(null);\n\n    try {\n      const scraper = new AirBnbRealScraper();\n\n      // Test connection first\n      const connectionTest = await scraper.testConnection();\n      if (!connectionTest.success) {\n        setScrapingError(connectionTest.message);\n        setScrapingStatus('error');\n        return;\n      }\n\n      // Generate dates for scraping\n      const checkIn = new Date();\n      checkIn.setDate(checkIn.getDate() + 7); // 1 week from now\n      const checkOut = new Date(checkIn);\n      checkOut.setDate(checkOut.getDate() + 3); // 3 night stay\n\n      const checkInStr = checkIn.toISOString().split('T')[0];\n      const checkOutStr = checkOut.toISOString().split('T')[0];\n\n      // Handle Peel Region scraping - use a broader search\n      const searchLocation =\n        selectedRegion === 'Peel Region'\n          ? 'Peel Region, Ontario'\n          : selectedRegion + ', Ontario';\n\n      logger.scrapingStart(selectedRegion, {\n        checkInStr,\n        checkOutStr,\n        adults: 2,\n        searchLocation,\n      });\n      const listings = await scraper.scrapeRealListings(\n        searchLocation,\n        checkInStr,\n        checkOutStr,\n        2\n      );\n\n      if (listings && listings.length > 0) {\n        setRealListings(listings);\n        setScrapingStatus('success');\n        logger.scrapingSuccess(selectedRegion, listings.length);\n      } else {\n        setScrapingError(\n          'No listings found. This is expected due to browser CORS limitations.'\n        );\n        setScrapingStatus('error');\n      }\n    } catch (error) {\n      logger.scrapingError(selectedRegion, error);\n      setScrapingError(error.message);\n      setScrapingStatus('error');\n    }\n  };\n\n  const MetricCard = ({\n    title,\n    value,\n    change,\n    icon,\n    color = designSystem.colors.primary[500],\n  }) => (\n    <div\n      className={`${designSystem.components.metric.card} ${designSystem.animations.transition}`}\n      style={{ borderLeftColor: color }}\n    >\n      <div className={designSystem.layout.flexBetween}>\n        <div>\n          <h3 className={designSystem.components.metric.label}>{title}</h3>\n          <p\n            className={`${designSystem.components.metric.value} text-gray-900`}\n          >\n            {value}\n          </p>\n          {change && (\n            <p\n              className={`${designSystem.components.metric.change} ${parseFloat(change) >= 0 ? designSystem.typography.success : designSystem.typography.danger}`}\n            >\n              {parseFloat(change) >= 0 ? '↗' : '↘'} {Math.abs(change)}%\n            </p>\n          )}\n        </div>\n        {icon && <div className=\"text-3xl\">{icon}</div>}\n      </div>\n    </div>\n  );\n\n  const TabButton = ({ id, label, isActive, onClick }) => (\n    <button\n      onClick={() => onClick(id)}\n      className={\n        isActive\n          ? designSystem.components.tab.active\n          : designSystem.components.tab.inactive\n      }\n    >\n      {label}\n    </button>\n  );\n\n  return (\n    <div\n      className={`${designSystem.spacing.container} bg-gray-50 min-h-screen`}\n    >\n      {/* Header */}\n      <div\n        className={designSystem.spacing.sectionGap.replace('space-y-8', 'mb-8')}\n      >\n        <h1 className={designSystem.typography.h1}>AirBnB Market Analytics</h1>\n        <p className={designSystem.typography.subtitle}>\n          Comprehensive analysis of short-term rental market trends and\n          opportunities\n        </p>\n      </div>\n\n      {/* Debug Info (only show when there are issues) */}\n      {filteredData.length === 0 && (\n        <div className=\"bg-yellow-100 border border-yellow-400 p-4 rounded-lg mb-6\">\n          <h3 className=\"font-semibold text-yellow-800\">Debug Information</h3>\n          <p className=\"text-sm text-yellow-700\">\n            Selected Region: {selectedRegion} | Filtered Data Length:{' '}\n            {filteredData.length} | Total Data Length:{' '}\n            {airbnbHistoricalData.length}\n          </p>\n          <p className=\"text-sm text-yellow-700\">\n            Available Regions:{' '}\n            {[...new Set(airbnbHistoricalData.map(item => item.region))].join(\n              ', '\n            )}\n          </p>\n        </div>\n      )}\n\n      {/* Controls */}\n      <div className={`${designSystem.components.card.base} mb-6`}>\n        <div className=\"flex flex-wrap gap-4 items-center justify-between\">\n          <div className=\"flex flex-wrap gap-4 items-center\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Region\n              </label>\n              <select\n                value={selectedRegion}\n                onChange={e => handleRegionChange(e.target.value)}\n                className={designSystem.components.input.base}\n              >\n                {regions.map(region => (\n                  <option key={region} value={region}>\n                    {region}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Time Period\n              </label>\n              <select\n                value={selectedTimeframe}\n                onChange={e => setSelectedTimeframe(e.target.value)}\n                className={designSystem.components.input.base}\n              >\n                {timeframes.map(tf => (\n                  <option key={tf.value} value={tf.value}>\n                    {tf.label}\n                  </option>\n                ))}\n              </select>\n            </div>\n          </div>\n\n          {/* Real Scraping Controls */}\n          <div className=\"flex items-center gap-3\">\n            <div className=\"text-right\">\n              <p className=\"text-xs text-gray-500\">Real-time Data</p>\n              <p className=\"text-xs text-gray-400\">\n                {scrapingStatus === 'loading'\n                  ? 'Scraping...'\n                  : scrapingStatus === 'success'\n                    ? `${realListings.length} listings`\n                    : scrapingStatus === 'error'\n                      ? 'Failed'\n                      : 'Mock data'}\n              </p>\n            </div>\n\n            <button\n              onClick={handleRealScraping}\n              disabled={scrapingStatus === 'loading'}\n              className={\n                scrapingStatus === 'loading'\n                  ? 'bg-gray-400 cursor-not-allowed px-4 py-2 rounded-lg font-medium'\n                  : realScrapingEnabled\n                    ? designSystem.components.button.danger\n                    : designSystem.components.button.success\n              }\n            >\n              {scrapingStatus === 'loading' ? (\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full\"></div>\n                  Scraping...\n                </div>\n              ) : realScrapingEnabled ? (\n                'Scrape Live Data'\n              ) : (\n                'Try Real Scraping'\n              )}\n            </button>\n          </div>\n        </div>\n\n        {/* Real Scraping Status */}\n        {scrapingError && (\n          <div className=\"mt-3 p-3 bg-red-50 border border-red-200 rounded-lg\">\n            <div className=\"flex items-start gap-2\">\n              <span className=\"text-red-500\">⚠️</span>\n              <div>\n                <p className=\"text-sm font-medium text-red-800\">\n                  Scraping Limited\n                </p>\n                <p className=\"text-xs text-red-600 mt-1\">{scrapingError}</p>\n                <p className=\"text-xs text-red-500 mt-1\">\n                  💡 For real scraping, use the Node.js backend script:{' '}\n                  <code>node airbnb-scraper-backend.js</code>\n                </p>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {scrapingStatus === 'success' && realListings.length > 0 && (\n          <div className=\"mt-3 p-3 bg-green-50 border border-green-200 rounded-lg\">\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-green-500\">✅</span>\n              <p className=\"text-sm font-medium text-green-800\">\n                Successfully scraped {realListings.length} real listings from\n                AirBnB!\n              </p>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Tab Navigation */}\n      <div className=\"flex gap-2 mb-6\">\n        <TabButton\n          id=\"overview\"\n          label=\"Overview\"\n          isActive={activeTab === 'overview'}\n          onClick={setActiveTab}\n        />\n        <TabButton\n          id=\"trends\"\n          label=\"Trends\"\n          isActive={activeTab === 'trends'}\n          onClick={setActiveTab}\n        />\n        <TabButton\n          id=\"competition\"\n          label=\"Competition\"\n          isActive={activeTab === 'competition'}\n          onClick={setActiveTab}\n        />\n        <TabButton\n          id=\"opportunity\"\n          label=\"Opportunity\"\n          isActive={activeTab === 'opportunity'}\n          onClick={setActiveTab}\n        />\n        <TabButton\n          id=\"april-analysis\"\n          label=\"April 2025 Analysis\"\n          isActive={activeTab === 'april-analysis'}\n          onClick={setActiveTab}\n        />\n      </div>\n\n      {/* Tab Content */}\n      {activeTab === 'overview' && (\n        <div className=\"space-y-6\">\n          {/* Key Metrics */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <MetricCard\n              title=\"Average Nightly Rate\"\n              value={\n                filteredData.length > 0\n                  ? `$${filteredData[filteredData.length - 1]?.averagePrice || 0}`\n                  : '$0'\n              }\n              change={airbnbMetrics?.averagePrice?.change}\n              icon=\"🏠\"\n              color={designSystem.colors.primary[500]}\n            />\n            <MetricCard\n              title=\"Total Active Listings\"\n              value={airbnbMetrics?.totalListings?.toLocaleString() || '0'}\n              change={airbnbMetrics?.newListings?.change}\n              icon=\"📊\"\n              color={designSystem.colors.success[500]}\n            />\n            <MetricCard\n              title=\"Average Occupancy Rate\"\n              value={\n                filteredData.length > 0\n                  ? `${filteredData[filteredData.length - 1]?.occupancyRate || 0}%`\n                  : '0%'\n              }\n              change={airbnbMetrics?.occupancyRate?.change}\n              icon=\"📈\"\n              color={designSystem.colors.warning[500]}\n            />\n            <MetricCard\n              title=\"Average Rating\"\n              value={\n                filteredData.length > 0\n                  ? filteredData[filteredData.length - 1]?.averageRating ||\n                    '0.0'\n                  : '0.0'\n              }\n              change={airbnbMetrics?.averageRating?.change}\n              icon=\"⭐\"\n              color={designSystem.colors.danger[500]}\n            />\n          </div>\n\n          {/* Revenue Estimation */}\n          {revenueEstimate && (\n            <div className=\"bg-white p-6 rounded-lg shadow-lg\">\n              <h2 className=\"text-xl font-bold text-gray-900 mb-4\">\n                Revenue Estimation - {selectedRegion}\n              </h2>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                  <p className=\"text-sm text-gray-600\">\n                    Monthly Revenue per Listing\n                  </p>\n                  <p className=\"text-2xl font-bold text-blue-600\">\n                    $\n                    {revenueEstimate.monthlyRevenuePerListing?.toLocaleString()}\n                  </p>\n                </div>\n                <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                  <p className=\"text-sm text-gray-600\">Total Market Revenue</p>\n                  <p className=\"text-2xl font-bold text-green-600\">\n                    ${(revenueEstimate.totalMarketRevenue / 1000000).toFixed(1)}\n                    M\n                  </p>\n                </div>\n                <div className=\"text-center p-4 bg-purple-50 rounded-lg\">\n                  <p className=\"text-sm text-gray-600\">Avg Bookings/Month</p>\n                  <p className=\"text-2xl font-bold text-purple-600\">\n                    {revenueEstimate.estimatedBookingsPerMonth}\n                  </p>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Property Type Distribution */}\n          <div className=\"bg-white p-6 rounded-lg shadow-lg\">\n            <h2 className=\"text-xl font-bold text-gray-900 mb-4\">\n              Property Type Distribution\n            </h2>\n            {filteredData.length > 0 &&\n            filteredData[filteredData.length - 1]?.propertyTypes?.length > 0 ? (\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <PieChart>\n                  <Pie\n                    data={filteredData[filteredData.length - 1].propertyTypes}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    outerRadius={100}\n                    fill=\"#8884d8\"\n                    dataKey=\"count\"\n                    label={({ type, percentage }) => `${type}: ${percentage}%`}\n                  >\n                    {filteredData[filteredData.length - 1].propertyTypes.map(\n                      (entry, index) => (\n                        <Cell\n                          key={`cell-${index}`}\n                          fill={colors[index % colors.length]}\n                        />\n                      )\n                    )}\n                  </Pie>\n                  <Tooltip />\n                </PieChart>\n              </ResponsiveContainer>\n            ) : (\n              <div className=\"h-72 flex items-center justify-center text-gray-500\">\n                <div className=\"text-center\">\n                  <p className=\"text-lg\">No property type data available</p>\n                  <p className=\"text-sm\">\n                    Select a different region or time period\n                  </p>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      {activeTab === 'trends' && (\n        <div className=\"space-y-6\">\n          {/* Price Trends */}\n          <div className=\"bg-white p-6 rounded-lg shadow-lg\">\n            <h2 className=\"text-xl font-bold text-gray-900 mb-4\">\n              Average Nightly Rate Trends\n            </h2>\n            {filteredData.length > 0 ? (\n              <ResponsiveContainer width=\"100%\" height={400}>\n                <LineChart data={filteredData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"month\" />\n                  <YAxis />\n                  <Tooltip\n                    formatter={value => [`$${value}`, 'Average Price']}\n                  />\n                  <Legend />\n                  <Line\n                    type=\"monotone\"\n                    dataKey=\"averagePrice\"\n                    stroke=\"#3B82F6\"\n                    strokeWidth={3}\n                    dot={{ fill: '#3B82F6' }}\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            ) : (\n              <div className=\"h-96 flex items-center justify-center text-gray-500\">\n                <div className=\"text-center\">\n                  <p className=\"text-lg\">No price trend data available</p>\n                  <p className=\"text-sm\">\n                    Select a different region or extend the time period\n                  </p>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Occupancy and Listings Trends */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <div className=\"bg-white p-6 rounded-lg shadow-lg\">\n              <h2 className=\"text-xl font-bold text-gray-900 mb-4\">\n                Occupancy Rate Trends\n              </h2>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <LineChart data={filteredData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"month\" />\n                  <YAxis />\n                  <Tooltip\n                    formatter={value => [`${value}%`, 'Occupancy Rate']}\n                  />\n                  <Line\n                    type=\"monotone\"\n                    dataKey=\"occupancyRate\"\n                    stroke=\"#10B981\"\n                    strokeWidth={2}\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </div>\n\n            <div className=\"bg-white p-6 rounded-lg shadow-lg\">\n              <h2 className=\"text-xl font-bold text-gray-900 mb-4\">\n                Total Listings Growth\n              </h2>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart data={filteredData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"month\" />\n                  <YAxis />\n                  <Tooltip />\n                  <Bar dataKey=\"totalListings\" fill=\"#F59E0B\" />\n                </BarChart>\n              </ResponsiveContainer>\n            </div>\n          </div>\n\n          {/* New Listings and Reviews */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <div className=\"bg-white p-6 rounded-lg shadow-lg\">\n              <h2 className=\"text-xl font-bold text-gray-900 mb-4\">\n                New Listings per Month\n              </h2>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart data={filteredData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"month\" />\n                  <YAxis />\n                  <Tooltip />\n                  <Bar dataKey=\"newListings\" fill=\"#8B5CF6\" />\n                </BarChart>\n              </ResponsiveContainer>\n            </div>\n\n            <div className=\"bg-white p-6 rounded-lg shadow-lg\">\n              <h2 className=\"text-xl font-bold text-gray-900 mb-4\">\n                Average Rating Trends\n              </h2>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <LineChart data={filteredData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"month\" />\n                  <YAxis domain={[3, 5]} />\n                  <Tooltip formatter={value => [value, 'Average Rating']} />\n                  <Line\n                    type=\"monotone\"\n                    dataKey=\"averageRating\"\n                    stroke=\"#EF4444\"\n                    strokeWidth={2}\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {activeTab === 'competition' && competitiveData && (\n        <div className=\"space-y-6\">\n          <div className=\"bg-white p-6 rounded-lg shadow-lg\">\n            <h2 className=\"text-xl font-bold text-gray-900 mb-4\">\n              Platform Competition Analysis - {selectedRegion}\n            </h2>\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart data={competitiveData.platforms}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"platform\" />\n                  <YAxis />\n                  <Tooltip\n                    formatter={value => [`$${value}`, 'Average Price']}\n                  />\n                  <Bar dataKey=\"averagePrice\" fill=\"#3B82F6\" />\n                </BarChart>\n              </ResponsiveContainer>\n\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <PieChart>\n                  <Pie\n                    data={competitiveData.platforms}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    outerRadius={100}\n                    fill=\"#8884d8\"\n                    dataKey=\"marketShare\"\n                    label={({ platform, marketShare }) =>\n                      `${platform}: ${marketShare}%`\n                    }\n                  >\n                    {competitiveData.platforms.map((entry, index) => (\n                      <Cell\n                        key={`cell-${index}`}\n                        fill={colors[index % colors.length]}\n                      />\n                    ))}\n                  </Pie>\n                  <Tooltip />\n                </PieChart>\n              </ResponsiveContainer>\n            </div>\n\n            <div className=\"mt-6 grid grid-cols-1 md:grid-cols-3 gap-4\">\n              {competitiveData.platforms.map((platform, index) => (\n                <div key={platform.platform} className=\"p-4 border rounded-lg\">\n                  <h3 className=\"font-semibold text-lg\">{platform.platform}</h3>\n                  <p className=\"text-sm text-gray-600\">\n                    Avg Price: ${platform.averagePrice}\n                  </p>\n                  <p className=\"text-sm text-gray-600\">\n                    Listings: {platform.listingCount}\n                  </p>\n                  <p className=\"text-sm text-gray-600\">\n                    Rating: {platform.averageRating}/5.0\n                  </p>\n                  <p className=\"text-sm text-gray-600\">\n                    Market Share: {platform.marketShare}%\n                  </p>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {activeTab === 'opportunity' && opportunityData && (\n        <div className=\"space-y-6\">\n          <div className=\"bg-white p-6 rounded-lg shadow-lg\">\n            <h2 className=\"text-xl font-bold text-gray-900 mb-4\">\n              Market Opportunity Analysis - {selectedRegion}\n            </h2>\n\n            <div className=\"mb-6\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-sm font-medium text-gray-700\">\n                  Opportunity Score\n                </span>\n                <span className=\"text-sm font-medium text-gray-700\">\n                  {opportunityData.opportunityScore}/100\n                </span>\n              </div>\n              <div className=\"w-full bg-gray-200 rounded-full h-4\">\n                <div\n                  className=\"bg-gradient-to-r from-red-400 via-yellow-400 to-green-400 h-4 rounded-full transition-all duration-500\"\n                  style={{ width: `${opportunityData.opportunityScore}%` }}\n                ></div>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <div>\n                <h3 className=\"text-lg font-semibold mb-3\">Key Metrics</h3>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span>Price Growth:</span>\n                    <span\n                      className={`font-semibold ${\n                        parseFloat(opportunityData.metrics.priceGrowth) >= 0\n                          ? 'text-green-600'\n                          : 'text-red-600'\n                      }`}\n                    >\n                      {opportunityData.metrics.priceGrowth}%\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Listing Growth:</span>\n                    <span className=\"font-semibold\">\n                      {opportunityData.metrics.listingGrowth}%\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Occupancy Rate:</span>\n                    <span className=\"font-semibold\">\n                      {opportunityData.metrics.occupancyRate}%\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Average Rating:</span>\n                    <span className=\"font-semibold\">\n                      {opportunityData.metrics.averageRating}/5.0\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Response Time:</span>\n                    <span className=\"font-semibold\">\n                      {opportunityData.metrics.averageResponseTime} min\n                    </span>\n                  </div>\n                </div>\n              </div>\n\n              <div>\n                <h3 className=\"text-lg font-semibold mb-3\">Market Risks</h3>\n                <ul className=\"space-y-2\">\n                  {opportunityData.risks.map((risk, index) => (\n                    <li key={index} className=\"flex items-start\">\n                      <span className=\"text-yellow-500 mr-2\">⚠️</span>\n                      <span className=\"text-sm\">{risk}</span>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            </div>\n\n            <div className=\"mt-6 p-4 bg-blue-50 rounded-lg\">\n              <h3 className=\"text-lg font-semibold mb-2\">Recommendation</h3>\n              <p className=\"text-gray-700\">{opportunityData.recommendation}</p>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {activeTab === 'april-analysis' && (\n        <div className=\"space-y-6\">\n          {/* April 2025 Analysis Overview */}\n          <div className=\"bg-white p-6 rounded-lg shadow-lg\">\n            <div className=\"flex items-center gap-3 mb-6\">\n              <span className=\"text-2xl\">📊</span>\n              <div>\n                <h2 className=\"text-2xl font-bold text-gray-900\">\n                  April 2025 Daily Market Analysis\n                </h2>\n                <p className=\"text-gray-600\">\n                  Comprehensive daily AirBnB data across all Peel Region\n                  municipalities\n                </p>\n              </div>\n            </div>\n\n            {/* Key Statistics */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n              <div className=\"bg-blue-50 p-4 rounded-lg\">\n                <div className=\"text-2xl font-bold text-blue-600\">3,275</div>\n                <div className=\"text-sm text-gray-600\">Total Listings</div>\n                <div className=\"text-xs text-blue-500\">30 days analyzed</div>\n              </div>\n              <div className=\"bg-green-50 p-4 rounded-lg\">\n                <div className=\"text-2xl font-bold text-green-600\">$94</div>\n                <div className=\"text-sm text-gray-600\">Avg Price/Night</div>\n                <div className=\"text-xs text-green-500\">Weighted average</div>\n              </div>\n              <div className=\"bg-purple-50 p-4 rounded-lg\">\n                <div className=\"text-2xl font-bold text-purple-600\">109</div>\n                <div className=\"text-sm text-gray-600\">Daily Avg Listings</div>\n                <div className=\"text-xs text-purple-500\">\n                  Across all regions\n                </div>\n              </div>\n              <div className=\"bg-orange-50 p-4 rounded-lg\">\n                <div className=\"text-2xl font-bold text-orange-600\">$495</div>\n                <div className=\"text-sm text-gray-600\">Price Range</div>\n                <div className=\"text-xs text-orange-500\">$10 - $505</div>\n              </div>\n            </div>\n\n            {/* Municipality Comparison */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n              <div className=\"bg-gradient-to-br from-blue-50 to-blue-100 p-6 rounded-lg border border-blue-200\">\n                <div className=\"flex items-center gap-2 mb-4\">\n                  <span className=\"text-xl\">🏢</span>\n                  <h3 className=\"text-lg font-bold text-blue-800\">\n                    Mississauga\n                  </h3>\n                </div>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-blue-700\">\n                      Total Listings:\n                    </span>\n                    <span className=\"font-semibold text-blue-900\">1,493</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-blue-700\">Avg Price:</span>\n                    <span className=\"font-semibold text-blue-900\">\n                      $96/night\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-blue-700\">Market Share:</span>\n                    <span className=\"font-semibold text-blue-900\">46%</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-blue-700\">\n                      Daily Average:\n                    </span>\n                    <span className=\"font-semibold text-blue-900\">\n                      50 listings\n                    </span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"bg-gradient-to-br from-green-50 to-green-100 p-6 rounded-lg border border-green-200\">\n                <div className=\"flex items-center gap-2 mb-4\">\n                  <span className=\"text-xl\">🏘️</span>\n                  <h3 className=\"text-lg font-bold text-green-800\">Brampton</h3>\n                </div>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-green-700\">\n                      Total Listings:\n                    </span>\n                    <span className=\"font-semibold text-green-900\">1,149</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-green-700\">Avg Price:</span>\n                    <span className=\"font-semibold text-green-900\">\n                      $72/night\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-green-700\">\n                      Market Share:\n                    </span>\n                    <span className=\"font-semibold text-green-900\">35%</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-green-700\">\n                      Daily Average:\n                    </span>\n                    <span className=\"font-semibold text-green-900\">\n                      38 listings\n                    </span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"bg-gradient-to-br from-purple-50 to-purple-100 p-6 rounded-lg border border-purple-200\">\n                <div className=\"flex items-center gap-2 mb-4\">\n                  <span className=\"text-xl\">🌲</span>\n                  <h3 className=\"text-lg font-bold text-purple-800\">Caledon</h3>\n                </div>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-purple-700\">\n                      Total Listings:\n                    </span>\n                    <span className=\"font-semibold text-purple-900\">633</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-purple-700\">Avg Price:</span>\n                    <span className=\"font-semibold text-purple-900\">\n                      $130/night\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-purple-700\">\n                      Market Share:\n                    </span>\n                    <span className=\"font-semibold text-purple-900\">19%</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-purple-700\">\n                      Daily Average:\n                    </span>\n                    <span className=\"font-semibold text-purple-900\">\n                      21 listings\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Market Insights */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <div className=\"bg-yellow-50 p-6 rounded-lg border border-yellow-200\">\n                <h3 className=\"text-lg font-bold text-yellow-800 mb-4 flex items-center gap-2\">\n                  <span>💰</span>\n                  Pricing Insights\n                </h3>\n                <ul className=\"space-y-2 text-sm\">\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"text-yellow-600\">•</span>\n                    <span>\n                      Caledon commands 81% premium over Brampton ($130 vs $72)\n                    </span>\n                  </li>\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"text-yellow-600\">•</span>\n                    <span>\n                      Mississauga offers mid-range pricing at $96/night\n                    </span>\n                  </li>\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"text-yellow-600\">•</span>\n                    <span>\n                      Weekend pricing increases: Caledon +50%, Mississauga +30%\n                    </span>\n                  </li>\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"text-yellow-600\">•</span>\n                    <span>\n                      Easter weekend showed major demand surge (+22% supply)\n                    </span>\n                  </li>\n                </ul>\n              </div>\n\n              <div className=\"bg-blue-50 p-6 rounded-lg border border-blue-200\">\n                <h3 className=\"text-lg font-bold text-blue-800 mb-4 flex items-center gap-2\">\n                  <span>📈</span>\n                  Supply Patterns\n                </h3>\n                <ul className=\"space-y-2 text-sm\">\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"text-blue-600\">•</span>\n                    <span>Mississauga dominates with 46% market share</span>\n                  </li>\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"text-blue-600\">•</span>\n                    <span>Weekend supply increases 18% across all markets</span>\n                  </li>\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"text-blue-600\">•</span>\n                    <span>Caledon operates as boutique market (19% share)</span>\n                  </li>\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"text-blue-600\">•</span>\n                    <span>\n                      Daily listings range: 85-130 across all municipalities\n                    </span>\n                  </li>\n                </ul>\n              </div>\n            </div>\n\n            {/* Quick Action Buttons */}\n            <div className=\"mt-8 flex flex-wrap gap-4\">\n              <button\n                onClick={() =>\n                  alert('Feature coming soon: Detailed municipality breakdown')\n                }\n                className={designSystem.components.button.primary}\n              >\n                View Detailed Analysis\n              </button>\n              <button\n                onClick={() => alert('Feature coming soon: Export April data')}\n                className={designSystem.components.button.success}\n              >\n                Export April Data\n              </button>\n              <button\n                onClick={() => alert('Feature coming soon: Generate report')}\n                className={designSystem.components.button.warning}\n              >\n                Generate Report\n              </button>\n            </div>\n          </div>\n\n          {/* Data Source Information */}\n          <div className=\"bg-gray-50 p-4 rounded-lg border-l-4 border-blue-500\">\n            <div className=\"flex items-start gap-3\">\n              <span className=\"text-blue-500 text-lg\">ℹ️</span>\n              <div>\n                <h4 className=\"font-semibold text-gray-800\">\n                  Data Source & Methodology\n                </h4>\n                <p className=\"text-sm text-gray-600 mt-1\">\n                  This analysis is based on simulated daily AirBnB data for\n                  April 2025, modeling realistic market patterns including\n                  weekend effects, holiday impacts, and regional pricing\n                  differences. The data represents 30 days of comprehensive\n                  market tracking across Mississauga, Brampton, and Caledon.\n                </p>\n                <p className=\"text-xs text-gray-500 mt-2\">\n                  📁 Data files: mississauga_daily_april_2025.json,\n                  brampton_daily_april_2025.json, caledon_daily_april_2025.json,\n                  peel_region_comparative_analysis_april_2025.json\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AirBnbDashboard;\n"],"names":["aggregatePeelRegionData","cityData","month","date","cities","filter","item","length","totalListings","reduce","sum","city","weightedAveragePrice","Math","round","averagePrice","weightedAverageRating","parseFloat","averageRating","toFixed","weightedOccupancyRate","occupancyRate","totalNewListings","newListings","totalReviews","reviewCount","weightedSuperhostPercentage","superhostPercentage","weightedResponseTime","averageResponseTime","aggregatedPropertyTypes","propertyTypeMap","forEach","propertyTypes","type","count","Object","values","percentage","push","aggregatedPriceRanges","priceRangeMap","priceRanges","range","aggregatedAmenities","amenityMap","amenityPopularity","amenity","totalPercentage","sort","a","b","region","getRegionBasePrice","Mississauga","Brampton","Caledon","getSeasonalMultiplier","generatePropertyTypeData","floor","random","map","_objectSpread","generatePriceRangeData","ranges","generateAmenityData","getOpportunityRecommendation","score","identifyMarketRisks","data","priceGrowth","listingGrowth","risks","airbnbHistoricalData","generateAirBnbHistoricalData","regions","i","months","subMonths","Date","monthStart","startOfMonth","monthLabel","format","dateString","seasonalMultiplier","getMonth","basePrice","monthData","peelRegionData","airbnbCompetitiveData","generateCompetitiveAnalysisData","platforms","regionData","platform","baseListings","listingCount","marketShare","totalShare","airbnbMetrics","latestMonth","previousMonth","calculateChange","current","previous","change","calculateAirBnbMetrics","airbnbOpportunityAnalysis","latest","sixMonthsAgo","demandIndicator","opportunityScore","min","metrics","recommendation","Boolean","constructor","this","baseUrl","searchUrl","rateLimit","lastRequestTime","corsProxies","client","axios","create","timeout","headers","Accept","Connection","rateLimiter","requests","lastReset","now","maxRequests","timeWindow","waitForRateLimit","timeSinceLastRequest","waitTime","logger","debug","concat","Promise","resolve","setTimeout","buildSearchUrl","location","checkIn","checkOut","adults","arguments","undefined","checkinDate","checkoutDate","params","URLSearchParams","place_id","query","checkin","checkout","toString","children","infants","pets","page","tab_id","refinement_paths","flexible_trip_lengths","monthly_start_date","monthly_length","price_filter_input_type","channel","date_picker_type","source","search_type","encodeURIComponent","tryDirectApiCall","apiUrl","operationName","locale","currency","variables","request","metadataOnly","version","tabId","refinementPaths","flexibleTripLengths","dateSearchType","placeId","searchType","cdnCacheSafe","simpleSearchTreatment","treatmentFlags","searchByMap","isInitialLoad","response","fetch","method","body","JSON","stringify","ok","json","dora","exploreV3","sections","listings","section","items","listing","parseApiListing","Error","error","warn","message","tryCorsProxy","proxies","proxy","proxiedUrl","html","text","parseHtmlResponse","tryAlternativeEndpoints","endpoints","endpoint","parseEndpointResponse","_listing$pricing","_listing$pricing$rate","_listing$pricing2","_listing$pricing2$rat","_listing$neighborhood","_listing$pictures","id","name","price","pricing","rate","amount","roomType","roomTypeCategory","latitude","lat","longitude","lng","neighborhood","neighborhoodOverview","localizedName","rating","avgRating","reviewsCount","amenities","listingAmenities","photos","pictures","pic","picture","availability","verified","isVerified","listingRegex","match","exec","listingData","parse","e","l","tryHtmlParsing","scrapeRealData","methods","bind","info","result","processRealListings","pricePerNight","parseInt","processed","processedAt","toISOString","testConnectivity","testUrl","mode","getImplementationSuggestions","frontend","title","options","description","difficulty","reliability","backend","apis","_ref","_filteredData","_airbnbMetrics$averag","_airbnbMetrics$totalL","_airbnbMetrics$newLis","_filteredData2","_airbnbMetrics$occupa","_filteredData3","_airbnbMetrics$averag2","_revenueEstimate$mont","_filteredData4","_filteredData4$proper","selectedRegion","propSelectedRegion","React","setSelectedRegion","useState","includes","some","userChangedRegion","handleRegionChange","newRegion","from","to","userInitiated","availableRegions","Set","fallbackRegion","find","originalRegion","selectedTimeframe","setSelectedTimeframe","activeTab","setActiveTab","realScrapingEnabled","setRealScrapingEnabled","scrapingStatus","setScrapingStatus","realListings","setRealListings","scrapingError","setScrapingError","filteredData","slice","filteredDataLength","hasData","revenueEstimate","estimateAirBnbRevenue","latestData","bookingsPerMonth","monthlyRevenuePerListing","totalMarketRevenue","estimatedBookingsPerMonth","averageBookingDuration","opportunityData","competitiveData","colors","designSystem","palette","MetricCard","_ref2","value","icon","color","primary","_jsx","className","metric","card","transition","style","borderLeftColor","_jsxs","flexBetween","label","success","danger","abs","TabButton","_ref3","isActive","onClick","tab","active","inactive","container","sectionGap","replace","h1","subtitle","join","base","onChange","target","input","tf","async","scraper","AirBnbRealScraper","connectionTest","testConnection","setDate","getDate","checkInStr","split","checkOutStr","searchLocation","scrapingStart","scrapeRealListings","scrapingSuccess","disabled","button","toLocaleString","warning","ResponsiveContainer","width","height","PieChart","Pie","cx","cy","outerRadius","fill","dataKey","_ref4","entry","index","Cell","Tooltip","LineChart","CartesianGrid","strokeDasharray","XAxis","YAxis","formatter","Legend","Line","stroke","strokeWidth","dot","BarChart","Bar","domain","_ref5","risk","alert"],"sourceRoot":""}